#if defined(_WIN32)
#if defined(_MSC_VER)
        #pragma warning (disable:4018) // 'expression' : signed/unsigned mismatch
        #pragma warning (disable:4065) // switch statement contains 'default' but no 'case' labels
        #pragma warning (disable:4146) // unary minus operator applied to unsigned type, result still unsigned
        #pragma warning (disable:4244) // 'conversion' conversion from 'type1' to 'type2', possible loss of data
        #pragma warning (disable:4251) // 'identifier' : class 'type' needs to have dll-interface to be used by clients of class 'type2'
        #pragma warning (disable:4637) // 'var' : conversion from 'size_t' to 'type', possible loss of data
        #pragma warning (disable:4305) // 'identifier' : truncation from 'type1' to 'type2'
        #pragma warning (disable:4307) // 'operator' : integral constant overflow
        #pragma warning (disable:4309) // 'conversion' : truncation of constant value
        #pragma warning (disable:4334) // 'operator' : result of 32-bit shift implicitly converted to 64 bits (was 64-bit shift intended?)
        #pragma warning (disable:4355) // 'this' : used in base member initializer list
        #pragma warning (disable:4506) // no definition for inline function 'function'
        #pragma warning (disable:4996) // The compiler encountered a deprecated declaration.
        #pragma warning (disable:4125) // decimal digit terminates octal escape sequence
        #pragma warning (disable:4800) // decimal digit terminates octal escape sequence
        #pragma warning (disable:4668) // decimal digit terminates octal escape sequence
        #endif

        // Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: service.proto
// Original file comments:
// service.proto
#ifndef GRPC_service_2eproto__INCLUDED
#define GRPC_service_2eproto__INCLUDED

#include "service.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace service {

class ConvaiService final {
 public:
  static constexpr char const* service_full_name() {
    return "service.ConvaiService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Hello(::grpc::ClientContext* context, const ::service::HelloRequest& request, ::service::HelloResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service::HelloResponse>> AsyncHello(::grpc::ClientContext* context, const ::service::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service::HelloResponse>>(AsyncHelloRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service::HelloResponse>> PrepareAsyncHello(::grpc::ClientContext* context, const ::service::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service::HelloResponse>>(PrepareAsyncHelloRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::service::HelloRequest, ::service::HelloResponse>> HelloStream(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::service::HelloRequest, ::service::HelloResponse>>(HelloStreamRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::service::HelloRequest, ::service::HelloResponse>> AsyncHelloStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::service::HelloRequest, ::service::HelloResponse>>(AsyncHelloStreamRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::service::HelloRequest, ::service::HelloResponse>> PrepareAsyncHelloStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::service::HelloRequest, ::service::HelloResponse>>(PrepareAsyncHelloStreamRaw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::service::STTRequest, ::service::STTResponse>> SpeechToText(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::service::STTRequest, ::service::STTResponse>>(SpeechToTextRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::service::STTRequest, ::service::STTResponse>> AsyncSpeechToText(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::service::STTRequest, ::service::STTResponse>>(AsyncSpeechToTextRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::service::STTRequest, ::service::STTResponse>> PrepareAsyncSpeechToText(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::service::STTRequest, ::service::STTResponse>>(PrepareAsyncSpeechToTextRaw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::service::GetResponseRequest, ::service::GetResponseResponse>> GetResponse(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::service::GetResponseRequest, ::service::GetResponseResponse>>(GetResponseRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::service::GetResponseRequest, ::service::GetResponseResponse>> AsyncGetResponse(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::service::GetResponseRequest, ::service::GetResponseResponse>>(AsyncGetResponseRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::service::GetResponseRequest, ::service::GetResponseResponse>> PrepareAsyncGetResponse(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::service::GetResponseRequest, ::service::GetResponseResponse>>(PrepareAsyncGetResponseRaw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::service::GetResponseResponse>> GetResponseSingle(::grpc::ClientContext* context, const ::service::GetResponseRequestSingle& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::service::GetResponseResponse>>(GetResponseSingleRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::service::GetResponseResponse>> AsyncGetResponseSingle(::grpc::ClientContext* context, const ::service::GetResponseRequestSingle& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::service::GetResponseResponse>>(AsyncGetResponseSingleRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::service::GetResponseResponse>> PrepareAsyncGetResponseSingle(::grpc::ClientContext* context, const ::service::GetResponseRequestSingle& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::service::GetResponseResponse>>(PrepareAsyncGetResponseSingleRaw(context, request, cq));
    }
    virtual ::grpc::Status SubmitFeedback(::grpc::ClientContext* context, const ::service::FeedbackRequest& request, ::service::FeedbackResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service::FeedbackResponse>> AsyncSubmitFeedback(::grpc::ClientContext* context, const ::service::FeedbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service::FeedbackResponse>>(AsyncSubmitFeedbackRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service::FeedbackResponse>> PrepareAsyncSubmitFeedback(::grpc::ClientContext* context, const ::service::FeedbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service::FeedbackResponse>>(PrepareAsyncSubmitFeedbackRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Hello(::grpc::ClientContext* context, const ::service::HelloRequest* request, ::service::HelloResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Hello(::grpc::ClientContext* context, const ::service::HelloRequest* request, ::service::HelloResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void HelloStream(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::service::HelloRequest,::service::HelloResponse>* reactor) = 0;
      virtual void SpeechToText(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::service::STTRequest,::service::STTResponse>* reactor) = 0;
      virtual void GetResponse(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::service::GetResponseRequest,::service::GetResponseResponse>* reactor) = 0;
      virtual void GetResponseSingle(::grpc::ClientContext* context, const ::service::GetResponseRequestSingle* request, ::grpc::ClientReadReactor< ::service::GetResponseResponse>* reactor) = 0;
      virtual void SubmitFeedback(::grpc::ClientContext* context, const ::service::FeedbackRequest* request, ::service::FeedbackResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SubmitFeedback(::grpc::ClientContext* context, const ::service::FeedbackRequest* request, ::service::FeedbackResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::service::HelloResponse>* AsyncHelloRaw(::grpc::ClientContext* context, const ::service::HelloRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::service::HelloResponse>* PrepareAsyncHelloRaw(::grpc::ClientContext* context, const ::service::HelloRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::service::HelloRequest, ::service::HelloResponse>* HelloStreamRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::service::HelloRequest, ::service::HelloResponse>* AsyncHelloStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::service::HelloRequest, ::service::HelloResponse>* PrepareAsyncHelloStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::service::STTRequest, ::service::STTResponse>* SpeechToTextRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::service::STTRequest, ::service::STTResponse>* AsyncSpeechToTextRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::service::STTRequest, ::service::STTResponse>* PrepareAsyncSpeechToTextRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::service::GetResponseRequest, ::service::GetResponseResponse>* GetResponseRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::service::GetResponseRequest, ::service::GetResponseResponse>* AsyncGetResponseRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::service::GetResponseRequest, ::service::GetResponseResponse>* PrepareAsyncGetResponseRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::service::GetResponseResponse>* GetResponseSingleRaw(::grpc::ClientContext* context, const ::service::GetResponseRequestSingle& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::service::GetResponseResponse>* AsyncGetResponseSingleRaw(::grpc::ClientContext* context, const ::service::GetResponseRequestSingle& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::service::GetResponseResponse>* PrepareAsyncGetResponseSingleRaw(::grpc::ClientContext* context, const ::service::GetResponseRequestSingle& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::service::FeedbackResponse>* AsyncSubmitFeedbackRaw(::grpc::ClientContext* context, const ::service::FeedbackRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::service::FeedbackResponse>* PrepareAsyncSubmitFeedbackRaw(::grpc::ClientContext* context, const ::service::FeedbackRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Hello(::grpc::ClientContext* context, const ::service::HelloRequest& request, ::service::HelloResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service::HelloResponse>> AsyncHello(::grpc::ClientContext* context, const ::service::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service::HelloResponse>>(AsyncHelloRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service::HelloResponse>> PrepareAsyncHello(::grpc::ClientContext* context, const ::service::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service::HelloResponse>>(PrepareAsyncHelloRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::service::HelloRequest, ::service::HelloResponse>> HelloStream(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::service::HelloRequest, ::service::HelloResponse>>(HelloStreamRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::service::HelloRequest, ::service::HelloResponse>> AsyncHelloStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::service::HelloRequest, ::service::HelloResponse>>(AsyncHelloStreamRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::service::HelloRequest, ::service::HelloResponse>> PrepareAsyncHelloStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::service::HelloRequest, ::service::HelloResponse>>(PrepareAsyncHelloStreamRaw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::service::STTRequest, ::service::STTResponse>> SpeechToText(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::service::STTRequest, ::service::STTResponse>>(SpeechToTextRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::service::STTRequest, ::service::STTResponse>> AsyncSpeechToText(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::service::STTRequest, ::service::STTResponse>>(AsyncSpeechToTextRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::service::STTRequest, ::service::STTResponse>> PrepareAsyncSpeechToText(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::service::STTRequest, ::service::STTResponse>>(PrepareAsyncSpeechToTextRaw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::service::GetResponseRequest, ::service::GetResponseResponse>> GetResponse(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::service::GetResponseRequest, ::service::GetResponseResponse>>(GetResponseRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::service::GetResponseRequest, ::service::GetResponseResponse>> AsyncGetResponse(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::service::GetResponseRequest, ::service::GetResponseResponse>>(AsyncGetResponseRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::service::GetResponseRequest, ::service::GetResponseResponse>> PrepareAsyncGetResponse(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::service::GetResponseRequest, ::service::GetResponseResponse>>(PrepareAsyncGetResponseRaw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::service::GetResponseResponse>> GetResponseSingle(::grpc::ClientContext* context, const ::service::GetResponseRequestSingle& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::service::GetResponseResponse>>(GetResponseSingleRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::service::GetResponseResponse>> AsyncGetResponseSingle(::grpc::ClientContext* context, const ::service::GetResponseRequestSingle& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::service::GetResponseResponse>>(AsyncGetResponseSingleRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::service::GetResponseResponse>> PrepareAsyncGetResponseSingle(::grpc::ClientContext* context, const ::service::GetResponseRequestSingle& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::service::GetResponseResponse>>(PrepareAsyncGetResponseSingleRaw(context, request, cq));
    }
    ::grpc::Status SubmitFeedback(::grpc::ClientContext* context, const ::service::FeedbackRequest& request, ::service::FeedbackResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service::FeedbackResponse>> AsyncSubmitFeedback(::grpc::ClientContext* context, const ::service::FeedbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service::FeedbackResponse>>(AsyncSubmitFeedbackRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service::FeedbackResponse>> PrepareAsyncSubmitFeedback(::grpc::ClientContext* context, const ::service::FeedbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service::FeedbackResponse>>(PrepareAsyncSubmitFeedbackRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Hello(::grpc::ClientContext* context, const ::service::HelloRequest* request, ::service::HelloResponse* response, std::function<void(::grpc::Status)>) override;
      void Hello(::grpc::ClientContext* context, const ::service::HelloRequest* request, ::service::HelloResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void HelloStream(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::service::HelloRequest,::service::HelloResponse>* reactor) override;
      void SpeechToText(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::service::STTRequest,::service::STTResponse>* reactor) override;
      void GetResponse(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::service::GetResponseRequest,::service::GetResponseResponse>* reactor) override;
      void GetResponseSingle(::grpc::ClientContext* context, const ::service::GetResponseRequestSingle* request, ::grpc::ClientReadReactor< ::service::GetResponseResponse>* reactor) override;
      void SubmitFeedback(::grpc::ClientContext* context, const ::service::FeedbackRequest* request, ::service::FeedbackResponse* response, std::function<void(::grpc::Status)>) override;
      void SubmitFeedback(::grpc::ClientContext* context, const ::service::FeedbackRequest* request, ::service::FeedbackResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::service::HelloResponse>* AsyncHelloRaw(::grpc::ClientContext* context, const ::service::HelloRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::service::HelloResponse>* PrepareAsyncHelloRaw(::grpc::ClientContext* context, const ::service::HelloRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::service::HelloRequest, ::service::HelloResponse>* HelloStreamRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::service::HelloRequest, ::service::HelloResponse>* AsyncHelloStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::service::HelloRequest, ::service::HelloResponse>* PrepareAsyncHelloStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::service::STTRequest, ::service::STTResponse>* SpeechToTextRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::service::STTRequest, ::service::STTResponse>* AsyncSpeechToTextRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::service::STTRequest, ::service::STTResponse>* PrepareAsyncSpeechToTextRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::service::GetResponseRequest, ::service::GetResponseResponse>* GetResponseRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::service::GetResponseRequest, ::service::GetResponseResponse>* AsyncGetResponseRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::service::GetResponseRequest, ::service::GetResponseResponse>* PrepareAsyncGetResponseRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::service::GetResponseResponse>* GetResponseSingleRaw(::grpc::ClientContext* context, const ::service::GetResponseRequestSingle& request) override;
    ::grpc::ClientAsyncReader< ::service::GetResponseResponse>* AsyncGetResponseSingleRaw(::grpc::ClientContext* context, const ::service::GetResponseRequestSingle& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::service::GetResponseResponse>* PrepareAsyncGetResponseSingleRaw(::grpc::ClientContext* context, const ::service::GetResponseRequestSingle& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::service::FeedbackResponse>* AsyncSubmitFeedbackRaw(::grpc::ClientContext* context, const ::service::FeedbackRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::service::FeedbackResponse>* PrepareAsyncSubmitFeedbackRaw(::grpc::ClientContext* context, const ::service::FeedbackRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Hello_;
    const ::grpc::internal::RpcMethod rpcmethod_HelloStream_;
    const ::grpc::internal::RpcMethod rpcmethod_SpeechToText_;
    const ::grpc::internal::RpcMethod rpcmethod_GetResponse_;
    const ::grpc::internal::RpcMethod rpcmethod_GetResponseSingle_;
    const ::grpc::internal::RpcMethod rpcmethod_SubmitFeedback_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Hello(::grpc::ServerContext* context, const ::service::HelloRequest* request, ::service::HelloResponse* response);
    virtual ::grpc::Status HelloStream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::service::HelloResponse, ::service::HelloRequest>* stream);
    virtual ::grpc::Status SpeechToText(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::service::STTResponse, ::service::STTRequest>* stream);
    virtual ::grpc::Status GetResponse(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::service::GetResponseResponse, ::service::GetResponseRequest>* stream);
    virtual ::grpc::Status GetResponseSingle(::grpc::ServerContext* context, const ::service::GetResponseRequestSingle* request, ::grpc::ServerWriter< ::service::GetResponseResponse>* writer);
    virtual ::grpc::Status SubmitFeedback(::grpc::ServerContext* context, const ::service::FeedbackRequest* request, ::service::FeedbackResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Hello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Hello() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Hello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Hello(::grpc::ServerContext* /*context*/, const ::service::HelloRequest* /*request*/, ::service::HelloResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHello(::grpc::ServerContext* context, ::service::HelloRequest* request, ::grpc::ServerAsyncResponseWriter< ::service::HelloResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_HelloStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_HelloStream() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_HelloStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HelloStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::service::HelloResponse, ::service::HelloRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHelloStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::service::HelloResponse, ::service::HelloRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(1, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SpeechToText : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SpeechToText() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_SpeechToText() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpeechToText(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::service::STTResponse, ::service::STTRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSpeechToText(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::service::STTResponse, ::service::STTRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(2, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetResponse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetResponse() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetResponse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetResponse(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::service::GetResponseResponse, ::service::GetResponseRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetResponse(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::service::GetResponseResponse, ::service::GetResponseRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(3, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetResponseSingle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetResponseSingle() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetResponseSingle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetResponseSingle(::grpc::ServerContext* /*context*/, const ::service::GetResponseRequestSingle* /*request*/, ::grpc::ServerWriter< ::service::GetResponseResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetResponseSingle(::grpc::ServerContext* context, ::service::GetResponseRequestSingle* request, ::grpc::ServerAsyncWriter< ::service::GetResponseResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(4, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SubmitFeedback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubmitFeedback() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_SubmitFeedback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitFeedback(::grpc::ServerContext* /*context*/, const ::service::FeedbackRequest* /*request*/, ::service::FeedbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitFeedback(::grpc::ServerContext* context, ::service::FeedbackRequest* request, ::grpc::ServerAsyncResponseWriter< ::service::FeedbackResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Hello<WithAsyncMethod_HelloStream<WithAsyncMethod_SpeechToText<WithAsyncMethod_GetResponse<WithAsyncMethod_GetResponseSingle<WithAsyncMethod_SubmitFeedback<Service > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Hello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Hello() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::service::HelloRequest, ::service::HelloResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::service::HelloRequest* request, ::service::HelloResponse* response) { return this->Hello(context, request, response); }));}
    void SetMessageAllocatorFor_Hello(
        ::grpc::MessageAllocator< ::service::HelloRequest, ::service::HelloResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::service::HelloRequest, ::service::HelloResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Hello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Hello(::grpc::ServerContext* /*context*/, const ::service::HelloRequest* /*request*/, ::service::HelloResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Hello(
      ::grpc::CallbackServerContext* /*context*/, const ::service::HelloRequest* /*request*/, ::service::HelloResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_HelloStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_HelloStream() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackBidiHandler< ::service::HelloRequest, ::service::HelloResponse>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->HelloStream(context); }));
    }
    ~WithCallbackMethod_HelloStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HelloStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::service::HelloResponse, ::service::HelloRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::service::HelloRequest, ::service::HelloResponse>* HelloStream(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SpeechToText : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SpeechToText() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackBidiHandler< ::service::STTRequest, ::service::STTResponse>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->SpeechToText(context); }));
    }
    ~WithCallbackMethod_SpeechToText() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpeechToText(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::service::STTResponse, ::service::STTRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::service::STTRequest, ::service::STTResponse>* SpeechToText(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetResponse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetResponse() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackBidiHandler< ::service::GetResponseRequest, ::service::GetResponseResponse>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->GetResponse(context); }));
    }
    ~WithCallbackMethod_GetResponse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetResponse(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::service::GetResponseResponse, ::service::GetResponseRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::service::GetResponseRequest, ::service::GetResponseResponse>* GetResponse(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetResponseSingle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetResponseSingle() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackServerStreamingHandler< ::service::GetResponseRequestSingle, ::service::GetResponseResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::service::GetResponseRequestSingle* request) { return this->GetResponseSingle(context, request); }));
    }
    ~WithCallbackMethod_GetResponseSingle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetResponseSingle(::grpc::ServerContext* /*context*/, const ::service::GetResponseRequestSingle* /*request*/, ::grpc::ServerWriter< ::service::GetResponseResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::service::GetResponseResponse>* GetResponseSingle(
      ::grpc::CallbackServerContext* /*context*/, const ::service::GetResponseRequestSingle* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SubmitFeedback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SubmitFeedback() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::service::FeedbackRequest, ::service::FeedbackResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::service::FeedbackRequest* request, ::service::FeedbackResponse* response) { return this->SubmitFeedback(context, request, response); }));}
    void SetMessageAllocatorFor_SubmitFeedback(
        ::grpc::MessageAllocator< ::service::FeedbackRequest, ::service::FeedbackResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::service::FeedbackRequest, ::service::FeedbackResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SubmitFeedback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitFeedback(::grpc::ServerContext* /*context*/, const ::service::FeedbackRequest* /*request*/, ::service::FeedbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SubmitFeedback(
      ::grpc::CallbackServerContext* /*context*/, const ::service::FeedbackRequest* /*request*/, ::service::FeedbackResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Hello<WithCallbackMethod_HelloStream<WithCallbackMethod_SpeechToText<WithCallbackMethod_GetResponse<WithCallbackMethod_GetResponseSingle<WithCallbackMethod_SubmitFeedback<Service > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Hello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Hello() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Hello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Hello(::grpc::ServerContext* /*context*/, const ::service::HelloRequest* /*request*/, ::service::HelloResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_HelloStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_HelloStream() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_HelloStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HelloStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::service::HelloResponse, ::service::HelloRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SpeechToText : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SpeechToText() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_SpeechToText() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpeechToText(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::service::STTResponse, ::service::STTRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetResponse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetResponse() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetResponse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetResponse(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::service::GetResponseResponse, ::service::GetResponseRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetResponseSingle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetResponseSingle() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetResponseSingle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetResponseSingle(::grpc::ServerContext* /*context*/, const ::service::GetResponseRequestSingle* /*request*/, ::grpc::ServerWriter< ::service::GetResponseResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SubmitFeedback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubmitFeedback() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_SubmitFeedback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitFeedback(::grpc::ServerContext* /*context*/, const ::service::FeedbackRequest* /*request*/, ::service::FeedbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Hello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Hello() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Hello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Hello(::grpc::ServerContext* /*context*/, const ::service::HelloRequest* /*request*/, ::service::HelloResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHello(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_HelloStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_HelloStream() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_HelloStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HelloStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::service::HelloResponse, ::service::HelloRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHelloStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(1, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SpeechToText : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SpeechToText() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_SpeechToText() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpeechToText(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::service::STTResponse, ::service::STTRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSpeechToText(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(2, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetResponse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetResponse() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetResponse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetResponse(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::service::GetResponseResponse, ::service::GetResponseRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetResponse(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(3, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetResponseSingle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetResponseSingle() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetResponseSingle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetResponseSingle(::grpc::ServerContext* /*context*/, const ::service::GetResponseRequestSingle* /*request*/, ::grpc::ServerWriter< ::service::GetResponseResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetResponseSingle(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(4, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubmitFeedback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubmitFeedback() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_SubmitFeedback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitFeedback(::grpc::ServerContext* /*context*/, const ::service::FeedbackRequest* /*request*/, ::service::FeedbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitFeedback(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Hello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Hello() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Hello(context, request, response); }));
    }
    ~WithRawCallbackMethod_Hello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Hello(::grpc::ServerContext* /*context*/, const ::service::HelloRequest* /*request*/, ::service::HelloResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Hello(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_HelloStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_HelloStream() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->HelloStream(context); }));
    }
    ~WithRawCallbackMethod_HelloStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HelloStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::service::HelloResponse, ::service::HelloRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* HelloStream(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SpeechToText : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SpeechToText() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->SpeechToText(context); }));
    }
    ~WithRawCallbackMethod_SpeechToText() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpeechToText(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::service::STTResponse, ::service::STTRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* SpeechToText(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetResponse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetResponse() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->GetResponse(context); }));
    }
    ~WithRawCallbackMethod_GetResponse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetResponse(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::service::GetResponseResponse, ::service::GetResponseRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* GetResponse(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetResponseSingle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetResponseSingle() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->GetResponseSingle(context, request); }));
    }
    ~WithRawCallbackMethod_GetResponseSingle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetResponseSingle(::grpc::ServerContext* /*context*/, const ::service::GetResponseRequestSingle* /*request*/, ::grpc::ServerWriter< ::service::GetResponseResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetResponseSingle(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SubmitFeedback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SubmitFeedback() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SubmitFeedback(context, request, response); }));
    }
    ~WithRawCallbackMethod_SubmitFeedback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitFeedback(::grpc::ServerContext* /*context*/, const ::service::FeedbackRequest* /*request*/, ::service::FeedbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SubmitFeedback(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Hello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Hello() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::service::HelloRequest, ::service::HelloResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::service::HelloRequest, ::service::HelloResponse>* streamer) {
                       return this->StreamedHello(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Hello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Hello(::grpc::ServerContext* /*context*/, const ::service::HelloRequest* /*request*/, ::service::HelloResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedHello(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::service::HelloRequest,::service::HelloResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SubmitFeedback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SubmitFeedback() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::service::FeedbackRequest, ::service::FeedbackResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::service::FeedbackRequest, ::service::FeedbackResponse>* streamer) {
                       return this->StreamedSubmitFeedback(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SubmitFeedback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubmitFeedback(::grpc::ServerContext* /*context*/, const ::service::FeedbackRequest* /*request*/, ::service::FeedbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSubmitFeedback(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::service::FeedbackRequest,::service::FeedbackResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Hello<WithStreamedUnaryMethod_SubmitFeedback<Service > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_GetResponseSingle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetResponseSingle() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::service::GetResponseRequestSingle, ::service::GetResponseResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::service::GetResponseRequestSingle, ::service::GetResponseResponse>* streamer) {
                       return this->StreamedGetResponseSingle(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetResponseSingle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetResponseSingle(::grpc::ServerContext* /*context*/, const ::service::GetResponseRequestSingle* /*request*/, ::grpc::ServerWriter< ::service::GetResponseResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetResponseSingle(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::service::GetResponseRequestSingle,::service::GetResponseResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_GetResponseSingle<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_Hello<WithSplitStreamingMethod_GetResponseSingle<WithStreamedUnaryMethod_SubmitFeedback<Service > > > StreamedService;
};

}  // namespace service


#endif  // GRPC_service_2eproto__INCLUDED
#else
// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: service.proto
// Original file comments:
// service.proto
#ifndef GRPC_service_2eproto__INCLUDED
#define GRPC_service_2eproto__INCLUDED

#include "service.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace service {

class ConvaiService final {
 public:
  static constexpr char const* service_full_name() {
    return "service.ConvaiService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Hello(::grpc::ClientContext* context, const ::service::HelloRequest& request, ::service::HelloResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service::HelloResponse>> AsyncHello(::grpc::ClientContext* context, const ::service::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service::HelloResponse>>(AsyncHelloRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service::HelloResponse>> PrepareAsyncHello(::grpc::ClientContext* context, const ::service::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service::HelloResponse>>(PrepareAsyncHelloRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::service::HelloRequest, ::service::HelloResponse>> HelloStream(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::service::HelloRequest, ::service::HelloResponse>>(HelloStreamRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::service::HelloRequest, ::service::HelloResponse>> AsyncHelloStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::service::HelloRequest, ::service::HelloResponse>>(AsyncHelloStreamRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::service::HelloRequest, ::service::HelloResponse>> PrepareAsyncHelloStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::service::HelloRequest, ::service::HelloResponse>>(PrepareAsyncHelloStreamRaw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::service::STTRequest, ::service::STTResponse>> SpeechToText(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::service::STTRequest, ::service::STTResponse>>(SpeechToTextRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::service::STTRequest, ::service::STTResponse>> AsyncSpeechToText(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::service::STTRequest, ::service::STTResponse>>(AsyncSpeechToTextRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::service::STTRequest, ::service::STTResponse>> PrepareAsyncSpeechToText(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::service::STTRequest, ::service::STTResponse>>(PrepareAsyncSpeechToTextRaw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::service::GetResponseRequest, ::service::GetResponseResponse>> GetResponse(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::service::GetResponseRequest, ::service::GetResponseResponse>>(GetResponseRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::service::GetResponseRequest, ::service::GetResponseResponse>> AsyncGetResponse(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::service::GetResponseRequest, ::service::GetResponseResponse>>(AsyncGetResponseRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::service::GetResponseRequest, ::service::GetResponseResponse>> PrepareAsyncGetResponse(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::service::GetResponseRequest, ::service::GetResponseResponse>>(PrepareAsyncGetResponseRaw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::service::GetResponseResponse>> GetResponseSingle(::grpc::ClientContext* context, const ::service::GetResponseRequestSingle& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::service::GetResponseResponse>>(GetResponseSingleRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::service::GetResponseResponse>> AsyncGetResponseSingle(::grpc::ClientContext* context, const ::service::GetResponseRequestSingle& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::service::GetResponseResponse>>(AsyncGetResponseSingleRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::service::GetResponseResponse>> PrepareAsyncGetResponseSingle(::grpc::ClientContext* context, const ::service::GetResponseRequestSingle& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::service::GetResponseResponse>>(PrepareAsyncGetResponseSingleRaw(context, request, cq));
    }
    virtual ::grpc::Status SubmitFeedback(::grpc::ClientContext* context, const ::service::FeedbackRequest& request, ::service::FeedbackResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service::FeedbackResponse>> AsyncSubmitFeedback(::grpc::ClientContext* context, const ::service::FeedbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service::FeedbackResponse>>(AsyncSubmitFeedbackRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service::FeedbackResponse>> PrepareAsyncSubmitFeedback(::grpc::ClientContext* context, const ::service::FeedbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service::FeedbackResponse>>(PrepareAsyncSubmitFeedbackRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Hello(::grpc::ClientContext* context, const ::service::HelloRequest* request, ::service::HelloResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Hello(::grpc::ClientContext* context, const ::service::HelloRequest* request, ::service::HelloResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void HelloStream(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::service::HelloRequest,::service::HelloResponse>* reactor) = 0;
      virtual void SpeechToText(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::service::STTRequest,::service::STTResponse>* reactor) = 0;
      virtual void GetResponse(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::service::GetResponseRequest,::service::GetResponseResponse>* reactor) = 0;
      virtual void GetResponseSingle(::grpc::ClientContext* context, const ::service::GetResponseRequestSingle* request, ::grpc::ClientReadReactor< ::service::GetResponseResponse>* reactor) = 0;
      virtual void SubmitFeedback(::grpc::ClientContext* context, const ::service::FeedbackRequest* request, ::service::FeedbackResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SubmitFeedback(::grpc::ClientContext* context, const ::service::FeedbackRequest* request, ::service::FeedbackResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::service::HelloResponse>* AsyncHelloRaw(::grpc::ClientContext* context, const ::service::HelloRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::service::HelloResponse>* PrepareAsyncHelloRaw(::grpc::ClientContext* context, const ::service::HelloRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::service::HelloRequest, ::service::HelloResponse>* HelloStreamRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::service::HelloRequest, ::service::HelloResponse>* AsyncHelloStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::service::HelloRequest, ::service::HelloResponse>* PrepareAsyncHelloStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::service::STTRequest, ::service::STTResponse>* SpeechToTextRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::service::STTRequest, ::service::STTResponse>* AsyncSpeechToTextRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::service::STTRequest, ::service::STTResponse>* PrepareAsyncSpeechToTextRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::service::GetResponseRequest, ::service::GetResponseResponse>* GetResponseRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::service::GetResponseRequest, ::service::GetResponseResponse>* AsyncGetResponseRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::service::GetResponseRequest, ::service::GetResponseResponse>* PrepareAsyncGetResponseRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::service::GetResponseResponse>* GetResponseSingleRaw(::grpc::ClientContext* context, const ::service::GetResponseRequestSingle& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::service::GetResponseResponse>* AsyncGetResponseSingleRaw(::grpc::ClientContext* context, const ::service::GetResponseRequestSingle& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::service::GetResponseResponse>* PrepareAsyncGetResponseSingleRaw(::grpc::ClientContext* context, const ::service::GetResponseRequestSingle& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::service::FeedbackResponse>* AsyncSubmitFeedbackRaw(::grpc::ClientContext* context, const ::service::FeedbackRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::service::FeedbackResponse>* PrepareAsyncSubmitFeedbackRaw(::grpc::ClientContext* context, const ::service::FeedbackRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Hello(::grpc::ClientContext* context, const ::service::HelloRequest& request, ::service::HelloResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service::HelloResponse>> AsyncHello(::grpc::ClientContext* context, const ::service::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service::HelloResponse>>(AsyncHelloRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service::HelloResponse>> PrepareAsyncHello(::grpc::ClientContext* context, const ::service::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service::HelloResponse>>(PrepareAsyncHelloRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::service::HelloRequest, ::service::HelloResponse>> HelloStream(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::service::HelloRequest, ::service::HelloResponse>>(HelloStreamRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::service::HelloRequest, ::service::HelloResponse>> AsyncHelloStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::service::HelloRequest, ::service::HelloResponse>>(AsyncHelloStreamRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::service::HelloRequest, ::service::HelloResponse>> PrepareAsyncHelloStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::service::HelloRequest, ::service::HelloResponse>>(PrepareAsyncHelloStreamRaw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::service::STTRequest, ::service::STTResponse>> SpeechToText(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::service::STTRequest, ::service::STTResponse>>(SpeechToTextRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::service::STTRequest, ::service::STTResponse>> AsyncSpeechToText(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::service::STTRequest, ::service::STTResponse>>(AsyncSpeechToTextRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::service::STTRequest, ::service::STTResponse>> PrepareAsyncSpeechToText(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::service::STTRequest, ::service::STTResponse>>(PrepareAsyncSpeechToTextRaw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::service::GetResponseRequest, ::service::GetResponseResponse>> GetResponse(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::service::GetResponseRequest, ::service::GetResponseResponse>>(GetResponseRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::service::GetResponseRequest, ::service::GetResponseResponse>> AsyncGetResponse(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::service::GetResponseRequest, ::service::GetResponseResponse>>(AsyncGetResponseRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::service::GetResponseRequest, ::service::GetResponseResponse>> PrepareAsyncGetResponse(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::service::GetResponseRequest, ::service::GetResponseResponse>>(PrepareAsyncGetResponseRaw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::service::GetResponseResponse>> GetResponseSingle(::grpc::ClientContext* context, const ::service::GetResponseRequestSingle& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::service::GetResponseResponse>>(GetResponseSingleRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::service::GetResponseResponse>> AsyncGetResponseSingle(::grpc::ClientContext* context, const ::service::GetResponseRequestSingle& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::service::GetResponseResponse>>(AsyncGetResponseSingleRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::service::GetResponseResponse>> PrepareAsyncGetResponseSingle(::grpc::ClientContext* context, const ::service::GetResponseRequestSingle& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::service::GetResponseResponse>>(PrepareAsyncGetResponseSingleRaw(context, request, cq));
    }
    ::grpc::Status SubmitFeedback(::grpc::ClientContext* context, const ::service::FeedbackRequest& request, ::service::FeedbackResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service::FeedbackResponse>> AsyncSubmitFeedback(::grpc::ClientContext* context, const ::service::FeedbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service::FeedbackResponse>>(AsyncSubmitFeedbackRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service::FeedbackResponse>> PrepareAsyncSubmitFeedback(::grpc::ClientContext* context, const ::service::FeedbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service::FeedbackResponse>>(PrepareAsyncSubmitFeedbackRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Hello(::grpc::ClientContext* context, const ::service::HelloRequest* request, ::service::HelloResponse* response, std::function<void(::grpc::Status)>) override;
      void Hello(::grpc::ClientContext* context, const ::service::HelloRequest* request, ::service::HelloResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void HelloStream(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::service::HelloRequest,::service::HelloResponse>* reactor) override;
      void SpeechToText(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::service::STTRequest,::service::STTResponse>* reactor) override;
      void GetResponse(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::service::GetResponseRequest,::service::GetResponseResponse>* reactor) override;
      void GetResponseSingle(::grpc::ClientContext* context, const ::service::GetResponseRequestSingle* request, ::grpc::ClientReadReactor< ::service::GetResponseResponse>* reactor) override;
      void SubmitFeedback(::grpc::ClientContext* context, const ::service::FeedbackRequest* request, ::service::FeedbackResponse* response, std::function<void(::grpc::Status)>) override;
      void SubmitFeedback(::grpc::ClientContext* context, const ::service::FeedbackRequest* request, ::service::FeedbackResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::service::HelloResponse>* AsyncHelloRaw(::grpc::ClientContext* context, const ::service::HelloRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::service::HelloResponse>* PrepareAsyncHelloRaw(::grpc::ClientContext* context, const ::service::HelloRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::service::HelloRequest, ::service::HelloResponse>* HelloStreamRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::service::HelloRequest, ::service::HelloResponse>* AsyncHelloStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::service::HelloRequest, ::service::HelloResponse>* PrepareAsyncHelloStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::service::STTRequest, ::service::STTResponse>* SpeechToTextRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::service::STTRequest, ::service::STTResponse>* AsyncSpeechToTextRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::service::STTRequest, ::service::STTResponse>* PrepareAsyncSpeechToTextRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::service::GetResponseRequest, ::service::GetResponseResponse>* GetResponseRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::service::GetResponseRequest, ::service::GetResponseResponse>* AsyncGetResponseRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::service::GetResponseRequest, ::service::GetResponseResponse>* PrepareAsyncGetResponseRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::service::GetResponseResponse>* GetResponseSingleRaw(::grpc::ClientContext* context, const ::service::GetResponseRequestSingle& request) override;
    ::grpc::ClientAsyncReader< ::service::GetResponseResponse>* AsyncGetResponseSingleRaw(::grpc::ClientContext* context, const ::service::GetResponseRequestSingle& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::service::GetResponseResponse>* PrepareAsyncGetResponseSingleRaw(::grpc::ClientContext* context, const ::service::GetResponseRequestSingle& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::service::FeedbackResponse>* AsyncSubmitFeedbackRaw(::grpc::ClientContext* context, const ::service::FeedbackRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::service::FeedbackResponse>* PrepareAsyncSubmitFeedbackRaw(::grpc::ClientContext* context, const ::service::FeedbackRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Hello_;
    const ::grpc::internal::RpcMethod rpcmethod_HelloStream_;
    const ::grpc::internal::RpcMethod rpcmethod_SpeechToText_;
    const ::grpc::internal::RpcMethod rpcmethod_GetResponse_;
    const ::grpc::internal::RpcMethod rpcmethod_GetResponseSingle_;
    const ::grpc::internal::RpcMethod rpcmethod_SubmitFeedback_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Hello(::grpc::ServerContext* context, const ::service::HelloRequest* request, ::service::HelloResponse* response);
    virtual ::grpc::Status HelloStream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::service::HelloResponse, ::service::HelloRequest>* stream);
    virtual ::grpc::Status SpeechToText(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::service::STTResponse, ::service::STTRequest>* stream);
    virtual ::grpc::Status GetResponse(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::service::GetResponseResponse, ::service::GetResponseRequest>* stream);
    virtual ::grpc::Status GetResponseSingle(::grpc::ServerContext* context, const ::service::GetResponseRequestSingle* request, ::grpc::ServerWriter< ::service::GetResponseResponse>* writer);
    virtual ::grpc::Status SubmitFeedback(::grpc::ServerContext* context, const ::service::FeedbackRequest* request, ::service::FeedbackResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Hello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Hello() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Hello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Hello(::grpc::ServerContext* /*context*/, const ::service::HelloRequest* /*request*/, ::service::HelloResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHello(::grpc::ServerContext* context, ::service::HelloRequest* request, ::grpc::ServerAsyncResponseWriter< ::service::HelloResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_HelloStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_HelloStream() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_HelloStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HelloStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::service::HelloResponse, ::service::HelloRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHelloStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::service::HelloResponse, ::service::HelloRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(1, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SpeechToText : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SpeechToText() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_SpeechToText() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpeechToText(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::service::STTResponse, ::service::STTRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSpeechToText(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::service::STTResponse, ::service::STTRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(2, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetResponse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetResponse() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetResponse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetResponse(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::service::GetResponseResponse, ::service::GetResponseRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetResponse(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::service::GetResponseResponse, ::service::GetResponseRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(3, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetResponseSingle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetResponseSingle() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetResponseSingle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetResponseSingle(::grpc::ServerContext* /*context*/, const ::service::GetResponseRequestSingle* /*request*/, ::grpc::ServerWriter< ::service::GetResponseResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetResponseSingle(::grpc::ServerContext* context, ::service::GetResponseRequestSingle* request, ::grpc::ServerAsyncWriter< ::service::GetResponseResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(4, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SubmitFeedback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubmitFeedback() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_SubmitFeedback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitFeedback(::grpc::ServerContext* /*context*/, const ::service::FeedbackRequest* /*request*/, ::service::FeedbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitFeedback(::grpc::ServerContext* context, ::service::FeedbackRequest* request, ::grpc::ServerAsyncResponseWriter< ::service::FeedbackResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Hello<WithAsyncMethod_HelloStream<WithAsyncMethod_SpeechToText<WithAsyncMethod_GetResponse<WithAsyncMethod_GetResponseSingle<WithAsyncMethod_SubmitFeedback<Service > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Hello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Hello() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::service::HelloRequest, ::service::HelloResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::service::HelloRequest* request, ::service::HelloResponse* response) { return this->Hello(context, request, response); }));}
    void SetMessageAllocatorFor_Hello(
        ::grpc::MessageAllocator< ::service::HelloRequest, ::service::HelloResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::service::HelloRequest, ::service::HelloResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Hello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Hello(::grpc::ServerContext* /*context*/, const ::service::HelloRequest* /*request*/, ::service::HelloResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Hello(
      ::grpc::CallbackServerContext* /*context*/, const ::service::HelloRequest* /*request*/, ::service::HelloResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_HelloStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_HelloStream() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackBidiHandler< ::service::HelloRequest, ::service::HelloResponse>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->HelloStream(context); }));
    }
    ~WithCallbackMethod_HelloStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HelloStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::service::HelloResponse, ::service::HelloRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::service::HelloRequest, ::service::HelloResponse>* HelloStream(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SpeechToText : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SpeechToText() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackBidiHandler< ::service::STTRequest, ::service::STTResponse>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->SpeechToText(context); }));
    }
    ~WithCallbackMethod_SpeechToText() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpeechToText(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::service::STTResponse, ::service::STTRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::service::STTRequest, ::service::STTResponse>* SpeechToText(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetResponse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetResponse() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackBidiHandler< ::service::GetResponseRequest, ::service::GetResponseResponse>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->GetResponse(context); }));
    }
    ~WithCallbackMethod_GetResponse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetResponse(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::service::GetResponseResponse, ::service::GetResponseRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::service::GetResponseRequest, ::service::GetResponseResponse>* GetResponse(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetResponseSingle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetResponseSingle() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackServerStreamingHandler< ::service::GetResponseRequestSingle, ::service::GetResponseResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::service::GetResponseRequestSingle* request) { return this->GetResponseSingle(context, request); }));
    }
    ~WithCallbackMethod_GetResponseSingle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetResponseSingle(::grpc::ServerContext* /*context*/, const ::service::GetResponseRequestSingle* /*request*/, ::grpc::ServerWriter< ::service::GetResponseResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::service::GetResponseResponse>* GetResponseSingle(
      ::grpc::CallbackServerContext* /*context*/, const ::service::GetResponseRequestSingle* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SubmitFeedback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SubmitFeedback() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::service::FeedbackRequest, ::service::FeedbackResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::service::FeedbackRequest* request, ::service::FeedbackResponse* response) { return this->SubmitFeedback(context, request, response); }));}
    void SetMessageAllocatorFor_SubmitFeedback(
        ::grpc::MessageAllocator< ::service::FeedbackRequest, ::service::FeedbackResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::service::FeedbackRequest, ::service::FeedbackResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SubmitFeedback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitFeedback(::grpc::ServerContext* /*context*/, const ::service::FeedbackRequest* /*request*/, ::service::FeedbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SubmitFeedback(
      ::grpc::CallbackServerContext* /*context*/, const ::service::FeedbackRequest* /*request*/, ::service::FeedbackResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Hello<WithCallbackMethod_HelloStream<WithCallbackMethod_SpeechToText<WithCallbackMethod_GetResponse<WithCallbackMethod_GetResponseSingle<WithCallbackMethod_SubmitFeedback<Service > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Hello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Hello() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Hello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Hello(::grpc::ServerContext* /*context*/, const ::service::HelloRequest* /*request*/, ::service::HelloResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_HelloStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_HelloStream() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_HelloStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HelloStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::service::HelloResponse, ::service::HelloRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SpeechToText : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SpeechToText() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_SpeechToText() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpeechToText(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::service::STTResponse, ::service::STTRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetResponse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetResponse() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetResponse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetResponse(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::service::GetResponseResponse, ::service::GetResponseRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetResponseSingle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetResponseSingle() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetResponseSingle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetResponseSingle(::grpc::ServerContext* /*context*/, const ::service::GetResponseRequestSingle* /*request*/, ::grpc::ServerWriter< ::service::GetResponseResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SubmitFeedback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubmitFeedback() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_SubmitFeedback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitFeedback(::grpc::ServerContext* /*context*/, const ::service::FeedbackRequest* /*request*/, ::service::FeedbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Hello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Hello() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Hello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Hello(::grpc::ServerContext* /*context*/, const ::service::HelloRequest* /*request*/, ::service::HelloResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHello(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_HelloStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_HelloStream() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_HelloStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HelloStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::service::HelloResponse, ::service::HelloRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHelloStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(1, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SpeechToText : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SpeechToText() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_SpeechToText() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpeechToText(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::service::STTResponse, ::service::STTRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSpeechToText(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(2, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetResponse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetResponse() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetResponse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetResponse(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::service::GetResponseResponse, ::service::GetResponseRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetResponse(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(3, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetResponseSingle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetResponseSingle() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetResponseSingle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetResponseSingle(::grpc::ServerContext* /*context*/, const ::service::GetResponseRequestSingle* /*request*/, ::grpc::ServerWriter< ::service::GetResponseResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetResponseSingle(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(4, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubmitFeedback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubmitFeedback() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_SubmitFeedback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitFeedback(::grpc::ServerContext* /*context*/, const ::service::FeedbackRequest* /*request*/, ::service::FeedbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitFeedback(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Hello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Hello() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Hello(context, request, response); }));
    }
    ~WithRawCallbackMethod_Hello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Hello(::grpc::ServerContext* /*context*/, const ::service::HelloRequest* /*request*/, ::service::HelloResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Hello(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_HelloStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_HelloStream() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->HelloStream(context); }));
    }
    ~WithRawCallbackMethod_HelloStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HelloStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::service::HelloResponse, ::service::HelloRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* HelloStream(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SpeechToText : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SpeechToText() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->SpeechToText(context); }));
    }
    ~WithRawCallbackMethod_SpeechToText() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpeechToText(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::service::STTResponse, ::service::STTRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* SpeechToText(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetResponse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetResponse() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->GetResponse(context); }));
    }
    ~WithRawCallbackMethod_GetResponse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetResponse(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::service::GetResponseResponse, ::service::GetResponseRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* GetResponse(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetResponseSingle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetResponseSingle() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->GetResponseSingle(context, request); }));
    }
    ~WithRawCallbackMethod_GetResponseSingle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetResponseSingle(::grpc::ServerContext* /*context*/, const ::service::GetResponseRequestSingle* /*request*/, ::grpc::ServerWriter< ::service::GetResponseResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetResponseSingle(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SubmitFeedback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SubmitFeedback() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SubmitFeedback(context, request, response); }));
    }
    ~WithRawCallbackMethod_SubmitFeedback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitFeedback(::grpc::ServerContext* /*context*/, const ::service::FeedbackRequest* /*request*/, ::service::FeedbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SubmitFeedback(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Hello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Hello() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::service::HelloRequest, ::service::HelloResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::service::HelloRequest, ::service::HelloResponse>* streamer) {
                       return this->StreamedHello(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Hello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Hello(::grpc::ServerContext* /*context*/, const ::service::HelloRequest* /*request*/, ::service::HelloResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedHello(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::service::HelloRequest,::service::HelloResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SubmitFeedback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SubmitFeedback() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::service::FeedbackRequest, ::service::FeedbackResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::service::FeedbackRequest, ::service::FeedbackResponse>* streamer) {
                       return this->StreamedSubmitFeedback(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SubmitFeedback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubmitFeedback(::grpc::ServerContext* /*context*/, const ::service::FeedbackRequest* /*request*/, ::service::FeedbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSubmitFeedback(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::service::FeedbackRequest,::service::FeedbackResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Hello<WithStreamedUnaryMethod_SubmitFeedback<Service > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_GetResponseSingle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetResponseSingle() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::service::GetResponseRequestSingle, ::service::GetResponseResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::service::GetResponseRequestSingle, ::service::GetResponseResponse>* streamer) {
                       return this->StreamedGetResponseSingle(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetResponseSingle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetResponseSingle(::grpc::ServerContext* /*context*/, const ::service::GetResponseRequestSingle* /*request*/, ::grpc::ServerWriter< ::service::GetResponseResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetResponseSingle(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::service::GetResponseRequestSingle,::service::GetResponseResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_GetResponseSingle<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_Hello<WithSplitStreamingMethod_GetResponseSingle<WithStreamedUnaryMethod_SubmitFeedback<Service > > > StreamedService;
};

}  // namespace service


#endif  // GRPC_service_2eproto__INCLUDED

#endif
