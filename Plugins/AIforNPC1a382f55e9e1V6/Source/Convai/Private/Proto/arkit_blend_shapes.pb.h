#if defined(_WIN32)
#if defined(_MSC_VER)
        #pragma warning (disable:4018) // 'expression' : signed/unsigned mismatch
        #pragma warning (disable:4065) // switch statement contains 'default' but no 'case' labels
        #pragma warning (disable:4146) // unary minus operator applied to unsigned type, result still unsigned
        #pragma warning (disable:4244) // 'conversion' conversion from 'type1' to 'type2', possible loss of data
        #pragma warning (disable:4251) // 'identifier' : class 'type' needs to have dll-interface to be used by clients of class 'type2'
        #pragma warning (disable:4637) // 'var' : conversion from 'size_t' to 'type', possible loss of data
        #pragma warning (disable:4305) // 'identifier' : truncation from 'type1' to 'type2'
        #pragma warning (disable:4307) // 'operator' : integral constant overflow
        #pragma warning (disable:4309) // 'conversion' : truncation of constant value
        #pragma warning (disable:4334) // 'operator' : result of 32-bit shift implicitly converted to 64 bits (was 64-bit shift intended?)
        #pragma warning (disable:4355) // 'this' : used in base member initializer list
        #pragma warning (disable:4506) // no definition for inline function 'function'
        #pragma warning (disable:4996) // The compiler encountered a deprecated declaration.
        #pragma warning (disable:4125) // decimal digit terminates octal escape sequence
        #pragma warning (disable:4800) // decimal digit terminates octal escape sequence
        #pragma warning (disable:4668) // decimal digit terminates octal escape sequence
        #endif

        // Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: arkit_blend_shapes.proto
// Protobuf C++ Version: 5.26.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_arkit_5fblend_5fshapes_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_arkit_5fblend_5fshapes_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION != 5026001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_arkit_5fblend_5fshapes_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_arkit_5fblend_5fshapes_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_arkit_5fblend_5fshapes_2eproto;
namespace service {
class ARKitBlendShapes;
struct ARKitBlendShapesDefaultTypeInternal;
extern ARKitBlendShapesDefaultTypeInternal _ARKitBlendShapes_default_instance_;
class ARKitBlendShapesData;
struct ARKitBlendShapesDataDefaultTypeInternal;
extern ARKitBlendShapesDataDefaultTypeInternal _ARKitBlendShapesData_default_instance_;
}  // namespace service
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace service {

// ===================================================================


// -------------------------------------------------------------------

class ARKitBlendShapes final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:service.ARKitBlendShapes) */ {
 public:
  inline ARKitBlendShapes() : ARKitBlendShapes(nullptr) {}
  ~ARKitBlendShapes() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ARKitBlendShapes(
      ::google::protobuf::internal::ConstantInitialized);

  inline ARKitBlendShapes(const ARKitBlendShapes& from) : ARKitBlendShapes(nullptr, from) {}
  inline ARKitBlendShapes(ARKitBlendShapes&& from) noexcept
      : ARKitBlendShapes(nullptr, std::move(from)) {}
  inline ARKitBlendShapes& operator=(const ARKitBlendShapes& from) {
    CopyFrom(from);
    return *this;
  }
  inline ARKitBlendShapes& operator=(ARKitBlendShapes&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ARKitBlendShapes& default_instance() {
    return *internal_default_instance();
  }
  static inline const ARKitBlendShapes* internal_default_instance() {
    return reinterpret_cast<const ARKitBlendShapes*>(
        &_ARKitBlendShapes_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(ARKitBlendShapes& a, ARKitBlendShapes& b) { a.Swap(&b); }
  inline void Swap(ARKitBlendShapes* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ARKitBlendShapes* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ARKitBlendShapes* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<ARKitBlendShapes>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ARKitBlendShapes& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ARKitBlendShapes& from) { ARKitBlendShapes::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ARKitBlendShapes* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "service.ARKitBlendShapes"; }

 protected:
  explicit ARKitBlendShapes(::google::protobuf::Arena* arena);
  ARKitBlendShapes(::google::protobuf::Arena* arena, const ARKitBlendShapes& from);
  ARKitBlendShapes(::google::protobuf::Arena* arena, ARKitBlendShapes&& from) noexcept
      : ARKitBlendShapes(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kBrowDownLeftFieldNumber = 1,
    kBrowDownRightFieldNumber = 2,
    kBrowInnerUpFieldNumber = 3,
    kBrowOuterUpLeftFieldNumber = 4,
    kBrowOuterUpRightFieldNumber = 5,
    kCheekPuffFieldNumber = 6,
    kCheekSquintLeftFieldNumber = 7,
    kCheekSquintRightFieldNumber = 8,
    kEyeBlinkLeftFieldNumber = 9,
    kEyeBlinkRightFieldNumber = 10,
    kEyeLookDownLeftFieldNumber = 11,
    kEyeLookDownRightFieldNumber = 12,
    kEyeLookInLeftFieldNumber = 13,
    kEyeLookInRightFieldNumber = 14,
    kEyeLookOutLeftFieldNumber = 15,
    kEyeLookOutRightFieldNumber = 16,
    kEyeLookUpLeftFieldNumber = 17,
    kEyeLookUpRightFieldNumber = 18,
    kEyeSquintLeftFieldNumber = 19,
    kEyeSquintRightFieldNumber = 20,
    kEyeWideLeftFieldNumber = 21,
    kEyeWideRightFieldNumber = 22,
    kJawForwardFieldNumber = 23,
    kJawLeftFieldNumber = 24,
    kJawOpenFieldNumber = 25,
    kJawRightFieldNumber = 26,
    kMouthCloseFieldNumber = 27,
    kMouthDimpleLeftFieldNumber = 28,
    kMouthDimpleRightFieldNumber = 29,
    kMouthFrownLeftFieldNumber = 30,
    kMouthFrownRightFieldNumber = 31,
    kMouthFunnelFieldNumber = 32,
    kMouthLeftFieldNumber = 33,
    kMouthLowerDownLeftFieldNumber = 34,
    kMouthLowerDownRightFieldNumber = 35,
    kMouthPressLeftFieldNumber = 36,
    kMouthPressRightFieldNumber = 37,
    kMouthPuckerFieldNumber = 38,
    kMouthRightFieldNumber = 39,
    kMouthRollLowerFieldNumber = 40,
    kMouthRollUpperFieldNumber = 41,
    kMouthShrugLowerFieldNumber = 42,
    kMouthShrugUpperFieldNumber = 43,
    kMouthSmileLeftFieldNumber = 44,
    kMouthSmileRightFieldNumber = 45,
    kMouthStretchLeftFieldNumber = 46,
    kMouthStretchRightFieldNumber = 47,
    kMouthUpperUpLeftFieldNumber = 48,
    kMouthUpperUpRightFieldNumber = 49,
    kNoseSneerLeftFieldNumber = 50,
    kNoseSneerRightFieldNumber = 51,
    kTongueOutFieldNumber = 52,
  };
  // float brow_down_left = 1;
  void clear_brow_down_left() ;
  float brow_down_left() const;
  void set_brow_down_left(float value);

  private:
  float _internal_brow_down_left() const;
  void _internal_set_brow_down_left(float value);

  public:
  // float brow_down_right = 2;
  void clear_brow_down_right() ;
  float brow_down_right() const;
  void set_brow_down_right(float value);

  private:
  float _internal_brow_down_right() const;
  void _internal_set_brow_down_right(float value);

  public:
  // float brow_inner_up = 3;
  void clear_brow_inner_up() ;
  float brow_inner_up() const;
  void set_brow_inner_up(float value);

  private:
  float _internal_brow_inner_up() const;
  void _internal_set_brow_inner_up(float value);

  public:
  // float brow_outer_up_left = 4;
  void clear_brow_outer_up_left() ;
  float brow_outer_up_left() const;
  void set_brow_outer_up_left(float value);

  private:
  float _internal_brow_outer_up_left() const;
  void _internal_set_brow_outer_up_left(float value);

  public:
  // float brow_outer_up_right = 5;
  void clear_brow_outer_up_right() ;
  float brow_outer_up_right() const;
  void set_brow_outer_up_right(float value);

  private:
  float _internal_brow_outer_up_right() const;
  void _internal_set_brow_outer_up_right(float value);

  public:
  // float cheek_puff = 6;
  void clear_cheek_puff() ;
  float cheek_puff() const;
  void set_cheek_puff(float value);

  private:
  float _internal_cheek_puff() const;
  void _internal_set_cheek_puff(float value);

  public:
  // float cheek_squint_left = 7;
  void clear_cheek_squint_left() ;
  float cheek_squint_left() const;
  void set_cheek_squint_left(float value);

  private:
  float _internal_cheek_squint_left() const;
  void _internal_set_cheek_squint_left(float value);

  public:
  // float cheek_squint_right = 8;
  void clear_cheek_squint_right() ;
  float cheek_squint_right() const;
  void set_cheek_squint_right(float value);

  private:
  float _internal_cheek_squint_right() const;
  void _internal_set_cheek_squint_right(float value);

  public:
  // float eye_blink_left = 9;
  void clear_eye_blink_left() ;
  float eye_blink_left() const;
  void set_eye_blink_left(float value);

  private:
  float _internal_eye_blink_left() const;
  void _internal_set_eye_blink_left(float value);

  public:
  // float eye_blink_right = 10;
  void clear_eye_blink_right() ;
  float eye_blink_right() const;
  void set_eye_blink_right(float value);

  private:
  float _internal_eye_blink_right() const;
  void _internal_set_eye_blink_right(float value);

  public:
  // float eye_look_down_left = 11;
  void clear_eye_look_down_left() ;
  float eye_look_down_left() const;
  void set_eye_look_down_left(float value);

  private:
  float _internal_eye_look_down_left() const;
  void _internal_set_eye_look_down_left(float value);

  public:
  // float eye_look_down_right = 12;
  void clear_eye_look_down_right() ;
  float eye_look_down_right() const;
  void set_eye_look_down_right(float value);

  private:
  float _internal_eye_look_down_right() const;
  void _internal_set_eye_look_down_right(float value);

  public:
  // float eye_look_in_left = 13;
  void clear_eye_look_in_left() ;
  float eye_look_in_left() const;
  void set_eye_look_in_left(float value);

  private:
  float _internal_eye_look_in_left() const;
  void _internal_set_eye_look_in_left(float value);

  public:
  // float eye_look_in_right = 14;
  void clear_eye_look_in_right() ;
  float eye_look_in_right() const;
  void set_eye_look_in_right(float value);

  private:
  float _internal_eye_look_in_right() const;
  void _internal_set_eye_look_in_right(float value);

  public:
  // float eye_look_out_left = 15;
  void clear_eye_look_out_left() ;
  float eye_look_out_left() const;
  void set_eye_look_out_left(float value);

  private:
  float _internal_eye_look_out_left() const;
  void _internal_set_eye_look_out_left(float value);

  public:
  // float eye_look_out_right = 16;
  void clear_eye_look_out_right() ;
  float eye_look_out_right() const;
  void set_eye_look_out_right(float value);

  private:
  float _internal_eye_look_out_right() const;
  void _internal_set_eye_look_out_right(float value);

  public:
  // float eye_look_up_left = 17;
  void clear_eye_look_up_left() ;
  float eye_look_up_left() const;
  void set_eye_look_up_left(float value);

  private:
  float _internal_eye_look_up_left() const;
  void _internal_set_eye_look_up_left(float value);

  public:
  // float eye_look_up_right = 18;
  void clear_eye_look_up_right() ;
  float eye_look_up_right() const;
  void set_eye_look_up_right(float value);

  private:
  float _internal_eye_look_up_right() const;
  void _internal_set_eye_look_up_right(float value);

  public:
  // float eye_squint_left = 19;
  void clear_eye_squint_left() ;
  float eye_squint_left() const;
  void set_eye_squint_left(float value);

  private:
  float _internal_eye_squint_left() const;
  void _internal_set_eye_squint_left(float value);

  public:
  // float eye_squint_right = 20;
  void clear_eye_squint_right() ;
  float eye_squint_right() const;
  void set_eye_squint_right(float value);

  private:
  float _internal_eye_squint_right() const;
  void _internal_set_eye_squint_right(float value);

  public:
  // float eye_wide_left = 21;
  void clear_eye_wide_left() ;
  float eye_wide_left() const;
  void set_eye_wide_left(float value);

  private:
  float _internal_eye_wide_left() const;
  void _internal_set_eye_wide_left(float value);

  public:
  // float eye_wide_right = 22;
  void clear_eye_wide_right() ;
  float eye_wide_right() const;
  void set_eye_wide_right(float value);

  private:
  float _internal_eye_wide_right() const;
  void _internal_set_eye_wide_right(float value);

  public:
  // float jaw_forward = 23;
  void clear_jaw_forward() ;
  float jaw_forward() const;
  void set_jaw_forward(float value);

  private:
  float _internal_jaw_forward() const;
  void _internal_set_jaw_forward(float value);

  public:
  // float jaw_left = 24;
  void clear_jaw_left() ;
  float jaw_left() const;
  void set_jaw_left(float value);

  private:
  float _internal_jaw_left() const;
  void _internal_set_jaw_left(float value);

  public:
  // float jaw_open = 25;
  void clear_jaw_open() ;
  float jaw_open() const;
  void set_jaw_open(float value);

  private:
  float _internal_jaw_open() const;
  void _internal_set_jaw_open(float value);

  public:
  // float jaw_right = 26;
  void clear_jaw_right() ;
  float jaw_right() const;
  void set_jaw_right(float value);

  private:
  float _internal_jaw_right() const;
  void _internal_set_jaw_right(float value);

  public:
  // float mouth_close = 27;
  void clear_mouth_close() ;
  float mouth_close() const;
  void set_mouth_close(float value);

  private:
  float _internal_mouth_close() const;
  void _internal_set_mouth_close(float value);

  public:
  // float mouth_dimple_left = 28;
  void clear_mouth_dimple_left() ;
  float mouth_dimple_left() const;
  void set_mouth_dimple_left(float value);

  private:
  float _internal_mouth_dimple_left() const;
  void _internal_set_mouth_dimple_left(float value);

  public:
  // float mouth_dimple_right = 29;
  void clear_mouth_dimple_right() ;
  float mouth_dimple_right() const;
  void set_mouth_dimple_right(float value);

  private:
  float _internal_mouth_dimple_right() const;
  void _internal_set_mouth_dimple_right(float value);

  public:
  // float mouth_frown_left = 30;
  void clear_mouth_frown_left() ;
  float mouth_frown_left() const;
  void set_mouth_frown_left(float value);

  private:
  float _internal_mouth_frown_left() const;
  void _internal_set_mouth_frown_left(float value);

  public:
  // float mouth_frown_right = 31;
  void clear_mouth_frown_right() ;
  float mouth_frown_right() const;
  void set_mouth_frown_right(float value);

  private:
  float _internal_mouth_frown_right() const;
  void _internal_set_mouth_frown_right(float value);

  public:
  // float mouth_funnel = 32;
  void clear_mouth_funnel() ;
  float mouth_funnel() const;
  void set_mouth_funnel(float value);

  private:
  float _internal_mouth_funnel() const;
  void _internal_set_mouth_funnel(float value);

  public:
  // float mouth_left = 33;
  void clear_mouth_left() ;
  float mouth_left() const;
  void set_mouth_left(float value);

  private:
  float _internal_mouth_left() const;
  void _internal_set_mouth_left(float value);

  public:
  // float mouth_lower_down_left = 34;
  void clear_mouth_lower_down_left() ;
  float mouth_lower_down_left() const;
  void set_mouth_lower_down_left(float value);

  private:
  float _internal_mouth_lower_down_left() const;
  void _internal_set_mouth_lower_down_left(float value);

  public:
  // float mouth_lower_down_right = 35;
  void clear_mouth_lower_down_right() ;
  float mouth_lower_down_right() const;
  void set_mouth_lower_down_right(float value);

  private:
  float _internal_mouth_lower_down_right() const;
  void _internal_set_mouth_lower_down_right(float value);

  public:
  // float mouth_press_left = 36;
  void clear_mouth_press_left() ;
  float mouth_press_left() const;
  void set_mouth_press_left(float value);

  private:
  float _internal_mouth_press_left() const;
  void _internal_set_mouth_press_left(float value);

  public:
  // float mouth_press_right = 37;
  void clear_mouth_press_right() ;
  float mouth_press_right() const;
  void set_mouth_press_right(float value);

  private:
  float _internal_mouth_press_right() const;
  void _internal_set_mouth_press_right(float value);

  public:
  // float mouth_pucker = 38;
  void clear_mouth_pucker() ;
  float mouth_pucker() const;
  void set_mouth_pucker(float value);

  private:
  float _internal_mouth_pucker() const;
  void _internal_set_mouth_pucker(float value);

  public:
  // float mouth_right = 39;
  void clear_mouth_right() ;
  float mouth_right() const;
  void set_mouth_right(float value);

  private:
  float _internal_mouth_right() const;
  void _internal_set_mouth_right(float value);

  public:
  // float mouth_roll_lower = 40;
  void clear_mouth_roll_lower() ;
  float mouth_roll_lower() const;
  void set_mouth_roll_lower(float value);

  private:
  float _internal_mouth_roll_lower() const;
  void _internal_set_mouth_roll_lower(float value);

  public:
  // float mouth_roll_upper = 41;
  void clear_mouth_roll_upper() ;
  float mouth_roll_upper() const;
  void set_mouth_roll_upper(float value);

  private:
  float _internal_mouth_roll_upper() const;
  void _internal_set_mouth_roll_upper(float value);

  public:
  // float mouth_shrug_lower = 42;
  void clear_mouth_shrug_lower() ;
  float mouth_shrug_lower() const;
  void set_mouth_shrug_lower(float value);

  private:
  float _internal_mouth_shrug_lower() const;
  void _internal_set_mouth_shrug_lower(float value);

  public:
  // float mouth_shrug_upper = 43;
  void clear_mouth_shrug_upper() ;
  float mouth_shrug_upper() const;
  void set_mouth_shrug_upper(float value);

  private:
  float _internal_mouth_shrug_upper() const;
  void _internal_set_mouth_shrug_upper(float value);

  public:
  // float mouth_smile_left = 44;
  void clear_mouth_smile_left() ;
  float mouth_smile_left() const;
  void set_mouth_smile_left(float value);

  private:
  float _internal_mouth_smile_left() const;
  void _internal_set_mouth_smile_left(float value);

  public:
  // float mouth_smile_right = 45;
  void clear_mouth_smile_right() ;
  float mouth_smile_right() const;
  void set_mouth_smile_right(float value);

  private:
  float _internal_mouth_smile_right() const;
  void _internal_set_mouth_smile_right(float value);

  public:
  // float mouth_stretch_left = 46;
  void clear_mouth_stretch_left() ;
  float mouth_stretch_left() const;
  void set_mouth_stretch_left(float value);

  private:
  float _internal_mouth_stretch_left() const;
  void _internal_set_mouth_stretch_left(float value);

  public:
  // float mouth_stretch_right = 47;
  void clear_mouth_stretch_right() ;
  float mouth_stretch_right() const;
  void set_mouth_stretch_right(float value);

  private:
  float _internal_mouth_stretch_right() const;
  void _internal_set_mouth_stretch_right(float value);

  public:
  // float mouth_upper_up_left = 48;
  void clear_mouth_upper_up_left() ;
  float mouth_upper_up_left() const;
  void set_mouth_upper_up_left(float value);

  private:
  float _internal_mouth_upper_up_left() const;
  void _internal_set_mouth_upper_up_left(float value);

  public:
  // float mouth_upper_up_right = 49;
  void clear_mouth_upper_up_right() ;
  float mouth_upper_up_right() const;
  void set_mouth_upper_up_right(float value);

  private:
  float _internal_mouth_upper_up_right() const;
  void _internal_set_mouth_upper_up_right(float value);

  public:
  // float nose_sneer_left = 50;
  void clear_nose_sneer_left() ;
  float nose_sneer_left() const;
  void set_nose_sneer_left(float value);

  private:
  float _internal_nose_sneer_left() const;
  void _internal_set_nose_sneer_left(float value);

  public:
  // float nose_sneer_right = 51;
  void clear_nose_sneer_right() ;
  float nose_sneer_right() const;
  void set_nose_sneer_right(float value);

  private:
  float _internal_nose_sneer_right() const;
  void _internal_set_nose_sneer_right(float value);

  public:
  // float tongue_out = 52;
  void clear_tongue_out() ;
  float tongue_out() const;
  void set_tongue_out(float value);

  private:
  float _internal_tongue_out() const;
  void _internal_set_tongue_out(float value);

  public:
  // @@protoc_insertion_point(class_scope:service.ARKitBlendShapes)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 52, 0,
      0, 9>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    float brow_down_left_;
    float brow_down_right_;
    float brow_inner_up_;
    float brow_outer_up_left_;
    float brow_outer_up_right_;
    float cheek_puff_;
    float cheek_squint_left_;
    float cheek_squint_right_;
    float eye_blink_left_;
    float eye_blink_right_;
    float eye_look_down_left_;
    float eye_look_down_right_;
    float eye_look_in_left_;
    float eye_look_in_right_;
    float eye_look_out_left_;
    float eye_look_out_right_;
    float eye_look_up_left_;
    float eye_look_up_right_;
    float eye_squint_left_;
    float eye_squint_right_;
    float eye_wide_left_;
    float eye_wide_right_;
    float jaw_forward_;
    float jaw_left_;
    float jaw_open_;
    float jaw_right_;
    float mouth_close_;
    float mouth_dimple_left_;
    float mouth_dimple_right_;
    float mouth_frown_left_;
    float mouth_frown_right_;
    float mouth_funnel_;
    float mouth_left_;
    float mouth_lower_down_left_;
    float mouth_lower_down_right_;
    float mouth_press_left_;
    float mouth_press_right_;
    float mouth_pucker_;
    float mouth_right_;
    float mouth_roll_lower_;
    float mouth_roll_upper_;
    float mouth_shrug_lower_;
    float mouth_shrug_upper_;
    float mouth_smile_left_;
    float mouth_smile_right_;
    float mouth_stretch_left_;
    float mouth_stretch_right_;
    float mouth_upper_up_left_;
    float mouth_upper_up_right_;
    float nose_sneer_left_;
    float nose_sneer_right_;
    float tongue_out_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_arkit_5fblend_5fshapes_2eproto;
};
// -------------------------------------------------------------------

class ARKitBlendShapesData final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:service.ARKitBlendShapesData) */ {
 public:
  inline ARKitBlendShapesData() : ARKitBlendShapesData(nullptr) {}
  ~ARKitBlendShapesData() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ARKitBlendShapesData(
      ::google::protobuf::internal::ConstantInitialized);

  inline ARKitBlendShapesData(const ARKitBlendShapesData& from) : ARKitBlendShapesData(nullptr, from) {}
  inline ARKitBlendShapesData(ARKitBlendShapesData&& from) noexcept
      : ARKitBlendShapesData(nullptr, std::move(from)) {}
  inline ARKitBlendShapesData& operator=(const ARKitBlendShapesData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ARKitBlendShapesData& operator=(ARKitBlendShapesData&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ARKitBlendShapesData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ARKitBlendShapesData* internal_default_instance() {
    return reinterpret_cast<const ARKitBlendShapesData*>(
        &_ARKitBlendShapesData_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(ARKitBlendShapesData& a, ARKitBlendShapesData& b) { a.Swap(&b); }
  inline void Swap(ARKitBlendShapesData* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ARKitBlendShapesData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ARKitBlendShapesData* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<ARKitBlendShapesData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ARKitBlendShapesData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ARKitBlendShapesData& from) { ARKitBlendShapesData::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ARKitBlendShapesData* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "service.ARKitBlendShapesData"; }

 protected:
  explicit ARKitBlendShapesData(::google::protobuf::Arena* arena);
  ARKitBlendShapesData(::google::protobuf::Arena* arena, const ARKitBlendShapesData& from);
  ARKitBlendShapesData(::google::protobuf::Arena* arena, ARKitBlendShapesData&& from) noexcept
      : ARKitBlendShapesData(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kArKitBlendShapesFieldNumber = 1,
  };
  // .service.ARKitBlendShapes ar_kit_blend_shapes = 1;
  bool has_ar_kit_blend_shapes() const;
  void clear_ar_kit_blend_shapes() ;
  const ::service::ARKitBlendShapes& ar_kit_blend_shapes() const;
  PROTOBUF_NODISCARD ::service::ARKitBlendShapes* release_ar_kit_blend_shapes();
  ::service::ARKitBlendShapes* mutable_ar_kit_blend_shapes();
  void set_allocated_ar_kit_blend_shapes(::service::ARKitBlendShapes* value);
  void unsafe_arena_set_allocated_ar_kit_blend_shapes(::service::ARKitBlendShapes* value);
  ::service::ARKitBlendShapes* unsafe_arena_release_ar_kit_blend_shapes();

  private:
  const ::service::ARKitBlendShapes& _internal_ar_kit_blend_shapes() const;
  ::service::ARKitBlendShapes* _internal_mutable_ar_kit_blend_shapes();

  public:
  // @@protoc_insertion_point(class_scope:service.ARKitBlendShapesData)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::service::ARKitBlendShapes* ar_kit_blend_shapes_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_arkit_5fblend_5fshapes_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ARKitBlendShapesData

// .service.ARKitBlendShapes ar_kit_blend_shapes = 1;
inline bool ARKitBlendShapesData::has_ar_kit_blend_shapes() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ar_kit_blend_shapes_ != nullptr);
  return value;
}
inline void ARKitBlendShapesData::clear_ar_kit_blend_shapes() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.ar_kit_blend_shapes_ != nullptr) _impl_.ar_kit_blend_shapes_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::service::ARKitBlendShapes& ARKitBlendShapesData::_internal_ar_kit_blend_shapes() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::service::ARKitBlendShapes* p = _impl_.ar_kit_blend_shapes_;
  return p != nullptr ? *p : reinterpret_cast<const ::service::ARKitBlendShapes&>(::service::_ARKitBlendShapes_default_instance_);
}
inline const ::service::ARKitBlendShapes& ARKitBlendShapesData::ar_kit_blend_shapes() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapesData.ar_kit_blend_shapes)
  return _internal_ar_kit_blend_shapes();
}
inline void ARKitBlendShapesData::unsafe_arena_set_allocated_ar_kit_blend_shapes(::service::ARKitBlendShapes* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.ar_kit_blend_shapes_);
  }
  _impl_.ar_kit_blend_shapes_ = reinterpret_cast<::service::ARKitBlendShapes*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service.ARKitBlendShapesData.ar_kit_blend_shapes)
}
inline ::service::ARKitBlendShapes* ARKitBlendShapesData::release_ar_kit_blend_shapes() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::service::ARKitBlendShapes* released = _impl_.ar_kit_blend_shapes_;
  _impl_.ar_kit_blend_shapes_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::service::ARKitBlendShapes* ARKitBlendShapesData::unsafe_arena_release_ar_kit_blend_shapes() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:service.ARKitBlendShapesData.ar_kit_blend_shapes)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::service::ARKitBlendShapes* temp = _impl_.ar_kit_blend_shapes_;
  _impl_.ar_kit_blend_shapes_ = nullptr;
  return temp;
}
inline ::service::ARKitBlendShapes* ARKitBlendShapesData::_internal_mutable_ar_kit_blend_shapes() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.ar_kit_blend_shapes_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::service::ARKitBlendShapes>(GetArena());
    _impl_.ar_kit_blend_shapes_ = reinterpret_cast<::service::ARKitBlendShapes*>(p);
  }
  return _impl_.ar_kit_blend_shapes_;
}
inline ::service::ARKitBlendShapes* ARKitBlendShapesData::mutable_ar_kit_blend_shapes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::service::ARKitBlendShapes* _msg = _internal_mutable_ar_kit_blend_shapes();
  // @@protoc_insertion_point(field_mutable:service.ARKitBlendShapesData.ar_kit_blend_shapes)
  return _msg;
}
inline void ARKitBlendShapesData::set_allocated_ar_kit_blend_shapes(::service::ARKitBlendShapes* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete (_impl_.ar_kit_blend_shapes_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.ar_kit_blend_shapes_ = reinterpret_cast<::service::ARKitBlendShapes*>(value);
  // @@protoc_insertion_point(field_set_allocated:service.ARKitBlendShapesData.ar_kit_blend_shapes)
}

// -------------------------------------------------------------------

// ARKitBlendShapes

// float brow_down_left = 1;
inline void ARKitBlendShapes::clear_brow_down_left() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.brow_down_left_ = 0;
}
inline float ARKitBlendShapes::brow_down_left() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.brow_down_left)
  return _internal_brow_down_left();
}
inline void ARKitBlendShapes::set_brow_down_left(float value) {
  _internal_set_brow_down_left(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.brow_down_left)
}
inline float ARKitBlendShapes::_internal_brow_down_left() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.brow_down_left_;
}
inline void ARKitBlendShapes::_internal_set_brow_down_left(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.brow_down_left_ = value;
}

// float brow_down_right = 2;
inline void ARKitBlendShapes::clear_brow_down_right() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.brow_down_right_ = 0;
}
inline float ARKitBlendShapes::brow_down_right() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.brow_down_right)
  return _internal_brow_down_right();
}
inline void ARKitBlendShapes::set_brow_down_right(float value) {
  _internal_set_brow_down_right(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.brow_down_right)
}
inline float ARKitBlendShapes::_internal_brow_down_right() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.brow_down_right_;
}
inline void ARKitBlendShapes::_internal_set_brow_down_right(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.brow_down_right_ = value;
}

// float brow_inner_up = 3;
inline void ARKitBlendShapes::clear_brow_inner_up() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.brow_inner_up_ = 0;
}
inline float ARKitBlendShapes::brow_inner_up() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.brow_inner_up)
  return _internal_brow_inner_up();
}
inline void ARKitBlendShapes::set_brow_inner_up(float value) {
  _internal_set_brow_inner_up(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.brow_inner_up)
}
inline float ARKitBlendShapes::_internal_brow_inner_up() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.brow_inner_up_;
}
inline void ARKitBlendShapes::_internal_set_brow_inner_up(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.brow_inner_up_ = value;
}

// float brow_outer_up_left = 4;
inline void ARKitBlendShapes::clear_brow_outer_up_left() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.brow_outer_up_left_ = 0;
}
inline float ARKitBlendShapes::brow_outer_up_left() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.brow_outer_up_left)
  return _internal_brow_outer_up_left();
}
inline void ARKitBlendShapes::set_brow_outer_up_left(float value) {
  _internal_set_brow_outer_up_left(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.brow_outer_up_left)
}
inline float ARKitBlendShapes::_internal_brow_outer_up_left() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.brow_outer_up_left_;
}
inline void ARKitBlendShapes::_internal_set_brow_outer_up_left(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.brow_outer_up_left_ = value;
}

// float brow_outer_up_right = 5;
inline void ARKitBlendShapes::clear_brow_outer_up_right() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.brow_outer_up_right_ = 0;
}
inline float ARKitBlendShapes::brow_outer_up_right() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.brow_outer_up_right)
  return _internal_brow_outer_up_right();
}
inline void ARKitBlendShapes::set_brow_outer_up_right(float value) {
  _internal_set_brow_outer_up_right(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.brow_outer_up_right)
}
inline float ARKitBlendShapes::_internal_brow_outer_up_right() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.brow_outer_up_right_;
}
inline void ARKitBlendShapes::_internal_set_brow_outer_up_right(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.brow_outer_up_right_ = value;
}

// float cheek_puff = 6;
inline void ARKitBlendShapes::clear_cheek_puff() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.cheek_puff_ = 0;
}
inline float ARKitBlendShapes::cheek_puff() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.cheek_puff)
  return _internal_cheek_puff();
}
inline void ARKitBlendShapes::set_cheek_puff(float value) {
  _internal_set_cheek_puff(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.cheek_puff)
}
inline float ARKitBlendShapes::_internal_cheek_puff() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.cheek_puff_;
}
inline void ARKitBlendShapes::_internal_set_cheek_puff(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.cheek_puff_ = value;
}

// float cheek_squint_left = 7;
inline void ARKitBlendShapes::clear_cheek_squint_left() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.cheek_squint_left_ = 0;
}
inline float ARKitBlendShapes::cheek_squint_left() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.cheek_squint_left)
  return _internal_cheek_squint_left();
}
inline void ARKitBlendShapes::set_cheek_squint_left(float value) {
  _internal_set_cheek_squint_left(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.cheek_squint_left)
}
inline float ARKitBlendShapes::_internal_cheek_squint_left() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.cheek_squint_left_;
}
inline void ARKitBlendShapes::_internal_set_cheek_squint_left(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.cheek_squint_left_ = value;
}

// float cheek_squint_right = 8;
inline void ARKitBlendShapes::clear_cheek_squint_right() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.cheek_squint_right_ = 0;
}
inline float ARKitBlendShapes::cheek_squint_right() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.cheek_squint_right)
  return _internal_cheek_squint_right();
}
inline void ARKitBlendShapes::set_cheek_squint_right(float value) {
  _internal_set_cheek_squint_right(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.cheek_squint_right)
}
inline float ARKitBlendShapes::_internal_cheek_squint_right() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.cheek_squint_right_;
}
inline void ARKitBlendShapes::_internal_set_cheek_squint_right(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.cheek_squint_right_ = value;
}

// float eye_blink_left = 9;
inline void ARKitBlendShapes::clear_eye_blink_left() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.eye_blink_left_ = 0;
}
inline float ARKitBlendShapes::eye_blink_left() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.eye_blink_left)
  return _internal_eye_blink_left();
}
inline void ARKitBlendShapes::set_eye_blink_left(float value) {
  _internal_set_eye_blink_left(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.eye_blink_left)
}
inline float ARKitBlendShapes::_internal_eye_blink_left() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.eye_blink_left_;
}
inline void ARKitBlendShapes::_internal_set_eye_blink_left(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.eye_blink_left_ = value;
}

// float eye_blink_right = 10;
inline void ARKitBlendShapes::clear_eye_blink_right() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.eye_blink_right_ = 0;
}
inline float ARKitBlendShapes::eye_blink_right() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.eye_blink_right)
  return _internal_eye_blink_right();
}
inline void ARKitBlendShapes::set_eye_blink_right(float value) {
  _internal_set_eye_blink_right(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.eye_blink_right)
}
inline float ARKitBlendShapes::_internal_eye_blink_right() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.eye_blink_right_;
}
inline void ARKitBlendShapes::_internal_set_eye_blink_right(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.eye_blink_right_ = value;
}

// float eye_look_down_left = 11;
inline void ARKitBlendShapes::clear_eye_look_down_left() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.eye_look_down_left_ = 0;
}
inline float ARKitBlendShapes::eye_look_down_left() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.eye_look_down_left)
  return _internal_eye_look_down_left();
}
inline void ARKitBlendShapes::set_eye_look_down_left(float value) {
  _internal_set_eye_look_down_left(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.eye_look_down_left)
}
inline float ARKitBlendShapes::_internal_eye_look_down_left() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.eye_look_down_left_;
}
inline void ARKitBlendShapes::_internal_set_eye_look_down_left(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.eye_look_down_left_ = value;
}

// float eye_look_down_right = 12;
inline void ARKitBlendShapes::clear_eye_look_down_right() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.eye_look_down_right_ = 0;
}
inline float ARKitBlendShapes::eye_look_down_right() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.eye_look_down_right)
  return _internal_eye_look_down_right();
}
inline void ARKitBlendShapes::set_eye_look_down_right(float value) {
  _internal_set_eye_look_down_right(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.eye_look_down_right)
}
inline float ARKitBlendShapes::_internal_eye_look_down_right() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.eye_look_down_right_;
}
inline void ARKitBlendShapes::_internal_set_eye_look_down_right(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.eye_look_down_right_ = value;
}

// float eye_look_in_left = 13;
inline void ARKitBlendShapes::clear_eye_look_in_left() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.eye_look_in_left_ = 0;
}
inline float ARKitBlendShapes::eye_look_in_left() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.eye_look_in_left)
  return _internal_eye_look_in_left();
}
inline void ARKitBlendShapes::set_eye_look_in_left(float value) {
  _internal_set_eye_look_in_left(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.eye_look_in_left)
}
inline float ARKitBlendShapes::_internal_eye_look_in_left() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.eye_look_in_left_;
}
inline void ARKitBlendShapes::_internal_set_eye_look_in_left(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.eye_look_in_left_ = value;
}

// float eye_look_in_right = 14;
inline void ARKitBlendShapes::clear_eye_look_in_right() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.eye_look_in_right_ = 0;
}
inline float ARKitBlendShapes::eye_look_in_right() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.eye_look_in_right)
  return _internal_eye_look_in_right();
}
inline void ARKitBlendShapes::set_eye_look_in_right(float value) {
  _internal_set_eye_look_in_right(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.eye_look_in_right)
}
inline float ARKitBlendShapes::_internal_eye_look_in_right() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.eye_look_in_right_;
}
inline void ARKitBlendShapes::_internal_set_eye_look_in_right(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.eye_look_in_right_ = value;
}

// float eye_look_out_left = 15;
inline void ARKitBlendShapes::clear_eye_look_out_left() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.eye_look_out_left_ = 0;
}
inline float ARKitBlendShapes::eye_look_out_left() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.eye_look_out_left)
  return _internal_eye_look_out_left();
}
inline void ARKitBlendShapes::set_eye_look_out_left(float value) {
  _internal_set_eye_look_out_left(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.eye_look_out_left)
}
inline float ARKitBlendShapes::_internal_eye_look_out_left() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.eye_look_out_left_;
}
inline void ARKitBlendShapes::_internal_set_eye_look_out_left(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.eye_look_out_left_ = value;
}

// float eye_look_out_right = 16;
inline void ARKitBlendShapes::clear_eye_look_out_right() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.eye_look_out_right_ = 0;
}
inline float ARKitBlendShapes::eye_look_out_right() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.eye_look_out_right)
  return _internal_eye_look_out_right();
}
inline void ARKitBlendShapes::set_eye_look_out_right(float value) {
  _internal_set_eye_look_out_right(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.eye_look_out_right)
}
inline float ARKitBlendShapes::_internal_eye_look_out_right() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.eye_look_out_right_;
}
inline void ARKitBlendShapes::_internal_set_eye_look_out_right(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.eye_look_out_right_ = value;
}

// float eye_look_up_left = 17;
inline void ARKitBlendShapes::clear_eye_look_up_left() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.eye_look_up_left_ = 0;
}
inline float ARKitBlendShapes::eye_look_up_left() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.eye_look_up_left)
  return _internal_eye_look_up_left();
}
inline void ARKitBlendShapes::set_eye_look_up_left(float value) {
  _internal_set_eye_look_up_left(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.eye_look_up_left)
}
inline float ARKitBlendShapes::_internal_eye_look_up_left() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.eye_look_up_left_;
}
inline void ARKitBlendShapes::_internal_set_eye_look_up_left(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.eye_look_up_left_ = value;
}

// float eye_look_up_right = 18;
inline void ARKitBlendShapes::clear_eye_look_up_right() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.eye_look_up_right_ = 0;
}
inline float ARKitBlendShapes::eye_look_up_right() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.eye_look_up_right)
  return _internal_eye_look_up_right();
}
inline void ARKitBlendShapes::set_eye_look_up_right(float value) {
  _internal_set_eye_look_up_right(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.eye_look_up_right)
}
inline float ARKitBlendShapes::_internal_eye_look_up_right() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.eye_look_up_right_;
}
inline void ARKitBlendShapes::_internal_set_eye_look_up_right(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.eye_look_up_right_ = value;
}

// float eye_squint_left = 19;
inline void ARKitBlendShapes::clear_eye_squint_left() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.eye_squint_left_ = 0;
}
inline float ARKitBlendShapes::eye_squint_left() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.eye_squint_left)
  return _internal_eye_squint_left();
}
inline void ARKitBlendShapes::set_eye_squint_left(float value) {
  _internal_set_eye_squint_left(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.eye_squint_left)
}
inline float ARKitBlendShapes::_internal_eye_squint_left() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.eye_squint_left_;
}
inline void ARKitBlendShapes::_internal_set_eye_squint_left(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.eye_squint_left_ = value;
}

// float eye_squint_right = 20;
inline void ARKitBlendShapes::clear_eye_squint_right() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.eye_squint_right_ = 0;
}
inline float ARKitBlendShapes::eye_squint_right() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.eye_squint_right)
  return _internal_eye_squint_right();
}
inline void ARKitBlendShapes::set_eye_squint_right(float value) {
  _internal_set_eye_squint_right(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.eye_squint_right)
}
inline float ARKitBlendShapes::_internal_eye_squint_right() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.eye_squint_right_;
}
inline void ARKitBlendShapes::_internal_set_eye_squint_right(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.eye_squint_right_ = value;
}

// float eye_wide_left = 21;
inline void ARKitBlendShapes::clear_eye_wide_left() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.eye_wide_left_ = 0;
}
inline float ARKitBlendShapes::eye_wide_left() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.eye_wide_left)
  return _internal_eye_wide_left();
}
inline void ARKitBlendShapes::set_eye_wide_left(float value) {
  _internal_set_eye_wide_left(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.eye_wide_left)
}
inline float ARKitBlendShapes::_internal_eye_wide_left() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.eye_wide_left_;
}
inline void ARKitBlendShapes::_internal_set_eye_wide_left(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.eye_wide_left_ = value;
}

// float eye_wide_right = 22;
inline void ARKitBlendShapes::clear_eye_wide_right() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.eye_wide_right_ = 0;
}
inline float ARKitBlendShapes::eye_wide_right() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.eye_wide_right)
  return _internal_eye_wide_right();
}
inline void ARKitBlendShapes::set_eye_wide_right(float value) {
  _internal_set_eye_wide_right(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.eye_wide_right)
}
inline float ARKitBlendShapes::_internal_eye_wide_right() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.eye_wide_right_;
}
inline void ARKitBlendShapes::_internal_set_eye_wide_right(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.eye_wide_right_ = value;
}

// float jaw_forward = 23;
inline void ARKitBlendShapes::clear_jaw_forward() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.jaw_forward_ = 0;
}
inline float ARKitBlendShapes::jaw_forward() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.jaw_forward)
  return _internal_jaw_forward();
}
inline void ARKitBlendShapes::set_jaw_forward(float value) {
  _internal_set_jaw_forward(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.jaw_forward)
}
inline float ARKitBlendShapes::_internal_jaw_forward() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.jaw_forward_;
}
inline void ARKitBlendShapes::_internal_set_jaw_forward(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.jaw_forward_ = value;
}

// float jaw_left = 24;
inline void ARKitBlendShapes::clear_jaw_left() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.jaw_left_ = 0;
}
inline float ARKitBlendShapes::jaw_left() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.jaw_left)
  return _internal_jaw_left();
}
inline void ARKitBlendShapes::set_jaw_left(float value) {
  _internal_set_jaw_left(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.jaw_left)
}
inline float ARKitBlendShapes::_internal_jaw_left() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.jaw_left_;
}
inline void ARKitBlendShapes::_internal_set_jaw_left(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.jaw_left_ = value;
}

// float jaw_open = 25;
inline void ARKitBlendShapes::clear_jaw_open() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.jaw_open_ = 0;
}
inline float ARKitBlendShapes::jaw_open() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.jaw_open)
  return _internal_jaw_open();
}
inline void ARKitBlendShapes::set_jaw_open(float value) {
  _internal_set_jaw_open(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.jaw_open)
}
inline float ARKitBlendShapes::_internal_jaw_open() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.jaw_open_;
}
inline void ARKitBlendShapes::_internal_set_jaw_open(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.jaw_open_ = value;
}

// float jaw_right = 26;
inline void ARKitBlendShapes::clear_jaw_right() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.jaw_right_ = 0;
}
inline float ARKitBlendShapes::jaw_right() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.jaw_right)
  return _internal_jaw_right();
}
inline void ARKitBlendShapes::set_jaw_right(float value) {
  _internal_set_jaw_right(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.jaw_right)
}
inline float ARKitBlendShapes::_internal_jaw_right() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.jaw_right_;
}
inline void ARKitBlendShapes::_internal_set_jaw_right(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.jaw_right_ = value;
}

// float mouth_close = 27;
inline void ARKitBlendShapes::clear_mouth_close() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mouth_close_ = 0;
}
inline float ARKitBlendShapes::mouth_close() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.mouth_close)
  return _internal_mouth_close();
}
inline void ARKitBlendShapes::set_mouth_close(float value) {
  _internal_set_mouth_close(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.mouth_close)
}
inline float ARKitBlendShapes::_internal_mouth_close() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.mouth_close_;
}
inline void ARKitBlendShapes::_internal_set_mouth_close(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mouth_close_ = value;
}

// float mouth_dimple_left = 28;
inline void ARKitBlendShapes::clear_mouth_dimple_left() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mouth_dimple_left_ = 0;
}
inline float ARKitBlendShapes::mouth_dimple_left() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.mouth_dimple_left)
  return _internal_mouth_dimple_left();
}
inline void ARKitBlendShapes::set_mouth_dimple_left(float value) {
  _internal_set_mouth_dimple_left(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.mouth_dimple_left)
}
inline float ARKitBlendShapes::_internal_mouth_dimple_left() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.mouth_dimple_left_;
}
inline void ARKitBlendShapes::_internal_set_mouth_dimple_left(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mouth_dimple_left_ = value;
}

// float mouth_dimple_right = 29;
inline void ARKitBlendShapes::clear_mouth_dimple_right() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mouth_dimple_right_ = 0;
}
inline float ARKitBlendShapes::mouth_dimple_right() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.mouth_dimple_right)
  return _internal_mouth_dimple_right();
}
inline void ARKitBlendShapes::set_mouth_dimple_right(float value) {
  _internal_set_mouth_dimple_right(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.mouth_dimple_right)
}
inline float ARKitBlendShapes::_internal_mouth_dimple_right() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.mouth_dimple_right_;
}
inline void ARKitBlendShapes::_internal_set_mouth_dimple_right(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mouth_dimple_right_ = value;
}

// float mouth_frown_left = 30;
inline void ARKitBlendShapes::clear_mouth_frown_left() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mouth_frown_left_ = 0;
}
inline float ARKitBlendShapes::mouth_frown_left() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.mouth_frown_left)
  return _internal_mouth_frown_left();
}
inline void ARKitBlendShapes::set_mouth_frown_left(float value) {
  _internal_set_mouth_frown_left(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.mouth_frown_left)
}
inline float ARKitBlendShapes::_internal_mouth_frown_left() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.mouth_frown_left_;
}
inline void ARKitBlendShapes::_internal_set_mouth_frown_left(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mouth_frown_left_ = value;
}

// float mouth_frown_right = 31;
inline void ARKitBlendShapes::clear_mouth_frown_right() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mouth_frown_right_ = 0;
}
inline float ARKitBlendShapes::mouth_frown_right() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.mouth_frown_right)
  return _internal_mouth_frown_right();
}
inline void ARKitBlendShapes::set_mouth_frown_right(float value) {
  _internal_set_mouth_frown_right(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.mouth_frown_right)
}
inline float ARKitBlendShapes::_internal_mouth_frown_right() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.mouth_frown_right_;
}
inline void ARKitBlendShapes::_internal_set_mouth_frown_right(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mouth_frown_right_ = value;
}

// float mouth_funnel = 32;
inline void ARKitBlendShapes::clear_mouth_funnel() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mouth_funnel_ = 0;
}
inline float ARKitBlendShapes::mouth_funnel() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.mouth_funnel)
  return _internal_mouth_funnel();
}
inline void ARKitBlendShapes::set_mouth_funnel(float value) {
  _internal_set_mouth_funnel(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.mouth_funnel)
}
inline float ARKitBlendShapes::_internal_mouth_funnel() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.mouth_funnel_;
}
inline void ARKitBlendShapes::_internal_set_mouth_funnel(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mouth_funnel_ = value;
}

// float mouth_left = 33;
inline void ARKitBlendShapes::clear_mouth_left() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mouth_left_ = 0;
}
inline float ARKitBlendShapes::mouth_left() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.mouth_left)
  return _internal_mouth_left();
}
inline void ARKitBlendShapes::set_mouth_left(float value) {
  _internal_set_mouth_left(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.mouth_left)
}
inline float ARKitBlendShapes::_internal_mouth_left() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.mouth_left_;
}
inline void ARKitBlendShapes::_internal_set_mouth_left(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mouth_left_ = value;
}

// float mouth_lower_down_left = 34;
inline void ARKitBlendShapes::clear_mouth_lower_down_left() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mouth_lower_down_left_ = 0;
}
inline float ARKitBlendShapes::mouth_lower_down_left() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.mouth_lower_down_left)
  return _internal_mouth_lower_down_left();
}
inline void ARKitBlendShapes::set_mouth_lower_down_left(float value) {
  _internal_set_mouth_lower_down_left(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.mouth_lower_down_left)
}
inline float ARKitBlendShapes::_internal_mouth_lower_down_left() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.mouth_lower_down_left_;
}
inline void ARKitBlendShapes::_internal_set_mouth_lower_down_left(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mouth_lower_down_left_ = value;
}

// float mouth_lower_down_right = 35;
inline void ARKitBlendShapes::clear_mouth_lower_down_right() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mouth_lower_down_right_ = 0;
}
inline float ARKitBlendShapes::mouth_lower_down_right() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.mouth_lower_down_right)
  return _internal_mouth_lower_down_right();
}
inline void ARKitBlendShapes::set_mouth_lower_down_right(float value) {
  _internal_set_mouth_lower_down_right(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.mouth_lower_down_right)
}
inline float ARKitBlendShapes::_internal_mouth_lower_down_right() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.mouth_lower_down_right_;
}
inline void ARKitBlendShapes::_internal_set_mouth_lower_down_right(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mouth_lower_down_right_ = value;
}

// float mouth_press_left = 36;
inline void ARKitBlendShapes::clear_mouth_press_left() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mouth_press_left_ = 0;
}
inline float ARKitBlendShapes::mouth_press_left() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.mouth_press_left)
  return _internal_mouth_press_left();
}
inline void ARKitBlendShapes::set_mouth_press_left(float value) {
  _internal_set_mouth_press_left(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.mouth_press_left)
}
inline float ARKitBlendShapes::_internal_mouth_press_left() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.mouth_press_left_;
}
inline void ARKitBlendShapes::_internal_set_mouth_press_left(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mouth_press_left_ = value;
}

// float mouth_press_right = 37;
inline void ARKitBlendShapes::clear_mouth_press_right() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mouth_press_right_ = 0;
}
inline float ARKitBlendShapes::mouth_press_right() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.mouth_press_right)
  return _internal_mouth_press_right();
}
inline void ARKitBlendShapes::set_mouth_press_right(float value) {
  _internal_set_mouth_press_right(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.mouth_press_right)
}
inline float ARKitBlendShapes::_internal_mouth_press_right() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.mouth_press_right_;
}
inline void ARKitBlendShapes::_internal_set_mouth_press_right(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mouth_press_right_ = value;
}

// float mouth_pucker = 38;
inline void ARKitBlendShapes::clear_mouth_pucker() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mouth_pucker_ = 0;
}
inline float ARKitBlendShapes::mouth_pucker() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.mouth_pucker)
  return _internal_mouth_pucker();
}
inline void ARKitBlendShapes::set_mouth_pucker(float value) {
  _internal_set_mouth_pucker(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.mouth_pucker)
}
inline float ARKitBlendShapes::_internal_mouth_pucker() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.mouth_pucker_;
}
inline void ARKitBlendShapes::_internal_set_mouth_pucker(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mouth_pucker_ = value;
}

// float mouth_right = 39;
inline void ARKitBlendShapes::clear_mouth_right() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mouth_right_ = 0;
}
inline float ARKitBlendShapes::mouth_right() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.mouth_right)
  return _internal_mouth_right();
}
inline void ARKitBlendShapes::set_mouth_right(float value) {
  _internal_set_mouth_right(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.mouth_right)
}
inline float ARKitBlendShapes::_internal_mouth_right() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.mouth_right_;
}
inline void ARKitBlendShapes::_internal_set_mouth_right(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mouth_right_ = value;
}

// float mouth_roll_lower = 40;
inline void ARKitBlendShapes::clear_mouth_roll_lower() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mouth_roll_lower_ = 0;
}
inline float ARKitBlendShapes::mouth_roll_lower() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.mouth_roll_lower)
  return _internal_mouth_roll_lower();
}
inline void ARKitBlendShapes::set_mouth_roll_lower(float value) {
  _internal_set_mouth_roll_lower(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.mouth_roll_lower)
}
inline float ARKitBlendShapes::_internal_mouth_roll_lower() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.mouth_roll_lower_;
}
inline void ARKitBlendShapes::_internal_set_mouth_roll_lower(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mouth_roll_lower_ = value;
}

// float mouth_roll_upper = 41;
inline void ARKitBlendShapes::clear_mouth_roll_upper() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mouth_roll_upper_ = 0;
}
inline float ARKitBlendShapes::mouth_roll_upper() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.mouth_roll_upper)
  return _internal_mouth_roll_upper();
}
inline void ARKitBlendShapes::set_mouth_roll_upper(float value) {
  _internal_set_mouth_roll_upper(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.mouth_roll_upper)
}
inline float ARKitBlendShapes::_internal_mouth_roll_upper() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.mouth_roll_upper_;
}
inline void ARKitBlendShapes::_internal_set_mouth_roll_upper(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mouth_roll_upper_ = value;
}

// float mouth_shrug_lower = 42;
inline void ARKitBlendShapes::clear_mouth_shrug_lower() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mouth_shrug_lower_ = 0;
}
inline float ARKitBlendShapes::mouth_shrug_lower() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.mouth_shrug_lower)
  return _internal_mouth_shrug_lower();
}
inline void ARKitBlendShapes::set_mouth_shrug_lower(float value) {
  _internal_set_mouth_shrug_lower(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.mouth_shrug_lower)
}
inline float ARKitBlendShapes::_internal_mouth_shrug_lower() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.mouth_shrug_lower_;
}
inline void ARKitBlendShapes::_internal_set_mouth_shrug_lower(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mouth_shrug_lower_ = value;
}

// float mouth_shrug_upper = 43;
inline void ARKitBlendShapes::clear_mouth_shrug_upper() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mouth_shrug_upper_ = 0;
}
inline float ARKitBlendShapes::mouth_shrug_upper() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.mouth_shrug_upper)
  return _internal_mouth_shrug_upper();
}
inline void ARKitBlendShapes::set_mouth_shrug_upper(float value) {
  _internal_set_mouth_shrug_upper(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.mouth_shrug_upper)
}
inline float ARKitBlendShapes::_internal_mouth_shrug_upper() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.mouth_shrug_upper_;
}
inline void ARKitBlendShapes::_internal_set_mouth_shrug_upper(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mouth_shrug_upper_ = value;
}

// float mouth_smile_left = 44;
inline void ARKitBlendShapes::clear_mouth_smile_left() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mouth_smile_left_ = 0;
}
inline float ARKitBlendShapes::mouth_smile_left() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.mouth_smile_left)
  return _internal_mouth_smile_left();
}
inline void ARKitBlendShapes::set_mouth_smile_left(float value) {
  _internal_set_mouth_smile_left(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.mouth_smile_left)
}
inline float ARKitBlendShapes::_internal_mouth_smile_left() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.mouth_smile_left_;
}
inline void ARKitBlendShapes::_internal_set_mouth_smile_left(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mouth_smile_left_ = value;
}

// float mouth_smile_right = 45;
inline void ARKitBlendShapes::clear_mouth_smile_right() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mouth_smile_right_ = 0;
}
inline float ARKitBlendShapes::mouth_smile_right() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.mouth_smile_right)
  return _internal_mouth_smile_right();
}
inline void ARKitBlendShapes::set_mouth_smile_right(float value) {
  _internal_set_mouth_smile_right(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.mouth_smile_right)
}
inline float ARKitBlendShapes::_internal_mouth_smile_right() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.mouth_smile_right_;
}
inline void ARKitBlendShapes::_internal_set_mouth_smile_right(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mouth_smile_right_ = value;
}

// float mouth_stretch_left = 46;
inline void ARKitBlendShapes::clear_mouth_stretch_left() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mouth_stretch_left_ = 0;
}
inline float ARKitBlendShapes::mouth_stretch_left() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.mouth_stretch_left)
  return _internal_mouth_stretch_left();
}
inline void ARKitBlendShapes::set_mouth_stretch_left(float value) {
  _internal_set_mouth_stretch_left(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.mouth_stretch_left)
}
inline float ARKitBlendShapes::_internal_mouth_stretch_left() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.mouth_stretch_left_;
}
inline void ARKitBlendShapes::_internal_set_mouth_stretch_left(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mouth_stretch_left_ = value;
}

// float mouth_stretch_right = 47;
inline void ARKitBlendShapes::clear_mouth_stretch_right() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mouth_stretch_right_ = 0;
}
inline float ARKitBlendShapes::mouth_stretch_right() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.mouth_stretch_right)
  return _internal_mouth_stretch_right();
}
inline void ARKitBlendShapes::set_mouth_stretch_right(float value) {
  _internal_set_mouth_stretch_right(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.mouth_stretch_right)
}
inline float ARKitBlendShapes::_internal_mouth_stretch_right() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.mouth_stretch_right_;
}
inline void ARKitBlendShapes::_internal_set_mouth_stretch_right(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mouth_stretch_right_ = value;
}

// float mouth_upper_up_left = 48;
inline void ARKitBlendShapes::clear_mouth_upper_up_left() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mouth_upper_up_left_ = 0;
}
inline float ARKitBlendShapes::mouth_upper_up_left() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.mouth_upper_up_left)
  return _internal_mouth_upper_up_left();
}
inline void ARKitBlendShapes::set_mouth_upper_up_left(float value) {
  _internal_set_mouth_upper_up_left(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.mouth_upper_up_left)
}
inline float ARKitBlendShapes::_internal_mouth_upper_up_left() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.mouth_upper_up_left_;
}
inline void ARKitBlendShapes::_internal_set_mouth_upper_up_left(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mouth_upper_up_left_ = value;
}

// float mouth_upper_up_right = 49;
inline void ARKitBlendShapes::clear_mouth_upper_up_right() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mouth_upper_up_right_ = 0;
}
inline float ARKitBlendShapes::mouth_upper_up_right() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.mouth_upper_up_right)
  return _internal_mouth_upper_up_right();
}
inline void ARKitBlendShapes::set_mouth_upper_up_right(float value) {
  _internal_set_mouth_upper_up_right(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.mouth_upper_up_right)
}
inline float ARKitBlendShapes::_internal_mouth_upper_up_right() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.mouth_upper_up_right_;
}
inline void ARKitBlendShapes::_internal_set_mouth_upper_up_right(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mouth_upper_up_right_ = value;
}

// float nose_sneer_left = 50;
inline void ARKitBlendShapes::clear_nose_sneer_left() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.nose_sneer_left_ = 0;
}
inline float ARKitBlendShapes::nose_sneer_left() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.nose_sneer_left)
  return _internal_nose_sneer_left();
}
inline void ARKitBlendShapes::set_nose_sneer_left(float value) {
  _internal_set_nose_sneer_left(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.nose_sneer_left)
}
inline float ARKitBlendShapes::_internal_nose_sneer_left() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.nose_sneer_left_;
}
inline void ARKitBlendShapes::_internal_set_nose_sneer_left(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.nose_sneer_left_ = value;
}

// float nose_sneer_right = 51;
inline void ARKitBlendShapes::clear_nose_sneer_right() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.nose_sneer_right_ = 0;
}
inline float ARKitBlendShapes::nose_sneer_right() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.nose_sneer_right)
  return _internal_nose_sneer_right();
}
inline void ARKitBlendShapes::set_nose_sneer_right(float value) {
  _internal_set_nose_sneer_right(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.nose_sneer_right)
}
inline float ARKitBlendShapes::_internal_nose_sneer_right() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.nose_sneer_right_;
}
inline void ARKitBlendShapes::_internal_set_nose_sneer_right(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.nose_sneer_right_ = value;
}

// float tongue_out = 52;
inline void ARKitBlendShapes::clear_tongue_out() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.tongue_out_ = 0;
}
inline float ARKitBlendShapes::tongue_out() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.tongue_out)
  return _internal_tongue_out();
}
inline void ARKitBlendShapes::set_tongue_out(float value) {
  _internal_set_tongue_out(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.tongue_out)
}
inline float ARKitBlendShapes::_internal_tongue_out() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tongue_out_;
}
inline void ARKitBlendShapes::_internal_set_tongue_out(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.tongue_out_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace service


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_arkit_5fblend_5fshapes_2eproto_2epb_2eh
#else
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: arkit_blend_shapes.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_arkit_5fblend_5fshapes_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_arkit_5fblend_5fshapes_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_arkit_5fblend_5fshapes_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_arkit_5fblend_5fshapes_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_arkit_5fblend_5fshapes_2eproto;
namespace service {
class ARKitBlendShapes;
struct ARKitBlendShapesDefaultTypeInternal;
extern ARKitBlendShapesDefaultTypeInternal _ARKitBlendShapes_default_instance_;
class ARKitBlendShapesData;
struct ARKitBlendShapesDataDefaultTypeInternal;
extern ARKitBlendShapesDataDefaultTypeInternal _ARKitBlendShapesData_default_instance_;
}  // namespace service
PROTOBUF_NAMESPACE_OPEN
template<> ::service::ARKitBlendShapes* Arena::CreateMaybeMessage<::service::ARKitBlendShapes>(Arena*);
template<> ::service::ARKitBlendShapesData* Arena::CreateMaybeMessage<::service::ARKitBlendShapesData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace service {

// ===================================================================

class ARKitBlendShapesData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service.ARKitBlendShapesData) */ {
 public:
  inline ARKitBlendShapesData() : ARKitBlendShapesData(nullptr) {}
  ~ARKitBlendShapesData() override;
  explicit PROTOBUF_CONSTEXPR ARKitBlendShapesData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ARKitBlendShapesData(const ARKitBlendShapesData& from);
  ARKitBlendShapesData(ARKitBlendShapesData&& from) noexcept
    : ARKitBlendShapesData() {
    *this = ::std::move(from);
  }

  inline ARKitBlendShapesData& operator=(const ARKitBlendShapesData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ARKitBlendShapesData& operator=(ARKitBlendShapesData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ARKitBlendShapesData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ARKitBlendShapesData* internal_default_instance() {
    return reinterpret_cast<const ARKitBlendShapesData*>(
               &_ARKitBlendShapesData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ARKitBlendShapesData& a, ARKitBlendShapesData& b) {
    a.Swap(&b);
  }
  inline void Swap(ARKitBlendShapesData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ARKitBlendShapesData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ARKitBlendShapesData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ARKitBlendShapesData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ARKitBlendShapesData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ARKitBlendShapesData& from) {
    ARKitBlendShapesData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ARKitBlendShapesData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service.ARKitBlendShapesData";
  }
  protected:
  explicit ARKitBlendShapesData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArKitBlendShapesFieldNumber = 1,
  };
  // .service.ARKitBlendShapes ar_kit_blend_shapes = 1;
  bool has_ar_kit_blend_shapes() const;
  private:
  bool _internal_has_ar_kit_blend_shapes() const;
  public:
  void clear_ar_kit_blend_shapes();
  const ::service::ARKitBlendShapes& ar_kit_blend_shapes() const;
  PROTOBUF_NODISCARD ::service::ARKitBlendShapes* release_ar_kit_blend_shapes();
  ::service::ARKitBlendShapes* mutable_ar_kit_blend_shapes();
  void set_allocated_ar_kit_blend_shapes(::service::ARKitBlendShapes* ar_kit_blend_shapes);
  private:
  const ::service::ARKitBlendShapes& _internal_ar_kit_blend_shapes() const;
  ::service::ARKitBlendShapes* _internal_mutable_ar_kit_blend_shapes();
  public:
  void unsafe_arena_set_allocated_ar_kit_blend_shapes(
      ::service::ARKitBlendShapes* ar_kit_blend_shapes);
  ::service::ARKitBlendShapes* unsafe_arena_release_ar_kit_blend_shapes();

  // @@protoc_insertion_point(class_scope:service.ARKitBlendShapesData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::service::ARKitBlendShapes* ar_kit_blend_shapes_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_arkit_5fblend_5fshapes_2eproto;
};
// -------------------------------------------------------------------

class ARKitBlendShapes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service.ARKitBlendShapes) */ {
 public:
  inline ARKitBlendShapes() : ARKitBlendShapes(nullptr) {}
  ~ARKitBlendShapes() override;
  explicit PROTOBUF_CONSTEXPR ARKitBlendShapes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ARKitBlendShapes(const ARKitBlendShapes& from);
  ARKitBlendShapes(ARKitBlendShapes&& from) noexcept
    : ARKitBlendShapes() {
    *this = ::std::move(from);
  }

  inline ARKitBlendShapes& operator=(const ARKitBlendShapes& from) {
    CopyFrom(from);
    return *this;
  }
  inline ARKitBlendShapes& operator=(ARKitBlendShapes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ARKitBlendShapes& default_instance() {
    return *internal_default_instance();
  }
  static inline const ARKitBlendShapes* internal_default_instance() {
    return reinterpret_cast<const ARKitBlendShapes*>(
               &_ARKitBlendShapes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ARKitBlendShapes& a, ARKitBlendShapes& b) {
    a.Swap(&b);
  }
  inline void Swap(ARKitBlendShapes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ARKitBlendShapes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ARKitBlendShapes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ARKitBlendShapes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ARKitBlendShapes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ARKitBlendShapes& from) {
    ARKitBlendShapes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ARKitBlendShapes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service.ARKitBlendShapes";
  }
  protected:
  explicit ARKitBlendShapes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowDownLeftFieldNumber = 1,
    kBrowDownRightFieldNumber = 2,
    kBrowInnerUpFieldNumber = 3,
    kBrowOuterUpLeftFieldNumber = 4,
    kBrowOuterUpRightFieldNumber = 5,
    kCheekPuffFieldNumber = 6,
    kCheekSquintLeftFieldNumber = 7,
    kCheekSquintRightFieldNumber = 8,
    kEyeBlinkLeftFieldNumber = 9,
    kEyeBlinkRightFieldNumber = 10,
    kEyeLookDownLeftFieldNumber = 11,
    kEyeLookDownRightFieldNumber = 12,
    kEyeLookInLeftFieldNumber = 13,
    kEyeLookInRightFieldNumber = 14,
    kEyeLookOutLeftFieldNumber = 15,
    kEyeLookOutRightFieldNumber = 16,
    kEyeLookUpLeftFieldNumber = 17,
    kEyeLookUpRightFieldNumber = 18,
    kEyeSquintLeftFieldNumber = 19,
    kEyeSquintRightFieldNumber = 20,
    kEyeWideLeftFieldNumber = 21,
    kEyeWideRightFieldNumber = 22,
    kJawForwardFieldNumber = 23,
    kJawLeftFieldNumber = 24,
    kJawOpenFieldNumber = 25,
    kJawRightFieldNumber = 26,
    kMouthCloseFieldNumber = 27,
    kMouthDimpleLeftFieldNumber = 28,
    kMouthDimpleRightFieldNumber = 29,
    kMouthFrownLeftFieldNumber = 30,
    kMouthFrownRightFieldNumber = 31,
    kMouthFunnelFieldNumber = 32,
    kMouthLeftFieldNumber = 33,
    kMouthLowerDownLeftFieldNumber = 34,
    kMouthLowerDownRightFieldNumber = 35,
    kMouthPressLeftFieldNumber = 36,
    kMouthPressRightFieldNumber = 37,
    kMouthPuckerFieldNumber = 38,
    kMouthRightFieldNumber = 39,
    kMouthRollLowerFieldNumber = 40,
    kMouthRollUpperFieldNumber = 41,
    kMouthShrugLowerFieldNumber = 42,
    kMouthShrugUpperFieldNumber = 43,
    kMouthSmileLeftFieldNumber = 44,
    kMouthSmileRightFieldNumber = 45,
    kMouthStretchLeftFieldNumber = 46,
    kMouthStretchRightFieldNumber = 47,
    kMouthUpperUpLeftFieldNumber = 48,
    kMouthUpperUpRightFieldNumber = 49,
    kNoseSneerLeftFieldNumber = 50,
    kNoseSneerRightFieldNumber = 51,
    kTongueOutFieldNumber = 52,
  };
  // float brow_down_left = 1;
  void clear_brow_down_left();
  float brow_down_left() const;
  void set_brow_down_left(float value);
  private:
  float _internal_brow_down_left() const;
  void _internal_set_brow_down_left(float value);
  public:

  // float brow_down_right = 2;
  void clear_brow_down_right();
  float brow_down_right() const;
  void set_brow_down_right(float value);
  private:
  float _internal_brow_down_right() const;
  void _internal_set_brow_down_right(float value);
  public:

  // float brow_inner_up = 3;
  void clear_brow_inner_up();
  float brow_inner_up() const;
  void set_brow_inner_up(float value);
  private:
  float _internal_brow_inner_up() const;
  void _internal_set_brow_inner_up(float value);
  public:

  // float brow_outer_up_left = 4;
  void clear_brow_outer_up_left();
  float brow_outer_up_left() const;
  void set_brow_outer_up_left(float value);
  private:
  float _internal_brow_outer_up_left() const;
  void _internal_set_brow_outer_up_left(float value);
  public:

  // float brow_outer_up_right = 5;
  void clear_brow_outer_up_right();
  float brow_outer_up_right() const;
  void set_brow_outer_up_right(float value);
  private:
  float _internal_brow_outer_up_right() const;
  void _internal_set_brow_outer_up_right(float value);
  public:

  // float cheek_puff = 6;
  void clear_cheek_puff();
  float cheek_puff() const;
  void set_cheek_puff(float value);
  private:
  float _internal_cheek_puff() const;
  void _internal_set_cheek_puff(float value);
  public:

  // float cheek_squint_left = 7;
  void clear_cheek_squint_left();
  float cheek_squint_left() const;
  void set_cheek_squint_left(float value);
  private:
  float _internal_cheek_squint_left() const;
  void _internal_set_cheek_squint_left(float value);
  public:

  // float cheek_squint_right = 8;
  void clear_cheek_squint_right();
  float cheek_squint_right() const;
  void set_cheek_squint_right(float value);
  private:
  float _internal_cheek_squint_right() const;
  void _internal_set_cheek_squint_right(float value);
  public:

  // float eye_blink_left = 9;
  void clear_eye_blink_left();
  float eye_blink_left() const;
  void set_eye_blink_left(float value);
  private:
  float _internal_eye_blink_left() const;
  void _internal_set_eye_blink_left(float value);
  public:

  // float eye_blink_right = 10;
  void clear_eye_blink_right();
  float eye_blink_right() const;
  void set_eye_blink_right(float value);
  private:
  float _internal_eye_blink_right() const;
  void _internal_set_eye_blink_right(float value);
  public:

  // float eye_look_down_left = 11;
  void clear_eye_look_down_left();
  float eye_look_down_left() const;
  void set_eye_look_down_left(float value);
  private:
  float _internal_eye_look_down_left() const;
  void _internal_set_eye_look_down_left(float value);
  public:

  // float eye_look_down_right = 12;
  void clear_eye_look_down_right();
  float eye_look_down_right() const;
  void set_eye_look_down_right(float value);
  private:
  float _internal_eye_look_down_right() const;
  void _internal_set_eye_look_down_right(float value);
  public:

  // float eye_look_in_left = 13;
  void clear_eye_look_in_left();
  float eye_look_in_left() const;
  void set_eye_look_in_left(float value);
  private:
  float _internal_eye_look_in_left() const;
  void _internal_set_eye_look_in_left(float value);
  public:

  // float eye_look_in_right = 14;
  void clear_eye_look_in_right();
  float eye_look_in_right() const;
  void set_eye_look_in_right(float value);
  private:
  float _internal_eye_look_in_right() const;
  void _internal_set_eye_look_in_right(float value);
  public:

  // float eye_look_out_left = 15;
  void clear_eye_look_out_left();
  float eye_look_out_left() const;
  void set_eye_look_out_left(float value);
  private:
  float _internal_eye_look_out_left() const;
  void _internal_set_eye_look_out_left(float value);
  public:

  // float eye_look_out_right = 16;
  void clear_eye_look_out_right();
  float eye_look_out_right() const;
  void set_eye_look_out_right(float value);
  private:
  float _internal_eye_look_out_right() const;
  void _internal_set_eye_look_out_right(float value);
  public:

  // float eye_look_up_left = 17;
  void clear_eye_look_up_left();
  float eye_look_up_left() const;
  void set_eye_look_up_left(float value);
  private:
  float _internal_eye_look_up_left() const;
  void _internal_set_eye_look_up_left(float value);
  public:

  // float eye_look_up_right = 18;
  void clear_eye_look_up_right();
  float eye_look_up_right() const;
  void set_eye_look_up_right(float value);
  private:
  float _internal_eye_look_up_right() const;
  void _internal_set_eye_look_up_right(float value);
  public:

  // float eye_squint_left = 19;
  void clear_eye_squint_left();
  float eye_squint_left() const;
  void set_eye_squint_left(float value);
  private:
  float _internal_eye_squint_left() const;
  void _internal_set_eye_squint_left(float value);
  public:

  // float eye_squint_right = 20;
  void clear_eye_squint_right();
  float eye_squint_right() const;
  void set_eye_squint_right(float value);
  private:
  float _internal_eye_squint_right() const;
  void _internal_set_eye_squint_right(float value);
  public:

  // float eye_wide_left = 21;
  void clear_eye_wide_left();
  float eye_wide_left() const;
  void set_eye_wide_left(float value);
  private:
  float _internal_eye_wide_left() const;
  void _internal_set_eye_wide_left(float value);
  public:

  // float eye_wide_right = 22;
  void clear_eye_wide_right();
  float eye_wide_right() const;
  void set_eye_wide_right(float value);
  private:
  float _internal_eye_wide_right() const;
  void _internal_set_eye_wide_right(float value);
  public:

  // float jaw_forward = 23;
  void clear_jaw_forward();
  float jaw_forward() const;
  void set_jaw_forward(float value);
  private:
  float _internal_jaw_forward() const;
  void _internal_set_jaw_forward(float value);
  public:

  // float jaw_left = 24;
  void clear_jaw_left();
  float jaw_left() const;
  void set_jaw_left(float value);
  private:
  float _internal_jaw_left() const;
  void _internal_set_jaw_left(float value);
  public:

  // float jaw_open = 25;
  void clear_jaw_open();
  float jaw_open() const;
  void set_jaw_open(float value);
  private:
  float _internal_jaw_open() const;
  void _internal_set_jaw_open(float value);
  public:

  // float jaw_right = 26;
  void clear_jaw_right();
  float jaw_right() const;
  void set_jaw_right(float value);
  private:
  float _internal_jaw_right() const;
  void _internal_set_jaw_right(float value);
  public:

  // float mouth_close = 27;
  void clear_mouth_close();
  float mouth_close() const;
  void set_mouth_close(float value);
  private:
  float _internal_mouth_close() const;
  void _internal_set_mouth_close(float value);
  public:

  // float mouth_dimple_left = 28;
  void clear_mouth_dimple_left();
  float mouth_dimple_left() const;
  void set_mouth_dimple_left(float value);
  private:
  float _internal_mouth_dimple_left() const;
  void _internal_set_mouth_dimple_left(float value);
  public:

  // float mouth_dimple_right = 29;
  void clear_mouth_dimple_right();
  float mouth_dimple_right() const;
  void set_mouth_dimple_right(float value);
  private:
  float _internal_mouth_dimple_right() const;
  void _internal_set_mouth_dimple_right(float value);
  public:

  // float mouth_frown_left = 30;
  void clear_mouth_frown_left();
  float mouth_frown_left() const;
  void set_mouth_frown_left(float value);
  private:
  float _internal_mouth_frown_left() const;
  void _internal_set_mouth_frown_left(float value);
  public:

  // float mouth_frown_right = 31;
  void clear_mouth_frown_right();
  float mouth_frown_right() const;
  void set_mouth_frown_right(float value);
  private:
  float _internal_mouth_frown_right() const;
  void _internal_set_mouth_frown_right(float value);
  public:

  // float mouth_funnel = 32;
  void clear_mouth_funnel();
  float mouth_funnel() const;
  void set_mouth_funnel(float value);
  private:
  float _internal_mouth_funnel() const;
  void _internal_set_mouth_funnel(float value);
  public:

  // float mouth_left = 33;
  void clear_mouth_left();
  float mouth_left() const;
  void set_mouth_left(float value);
  private:
  float _internal_mouth_left() const;
  void _internal_set_mouth_left(float value);
  public:

  // float mouth_lower_down_left = 34;
  void clear_mouth_lower_down_left();
  float mouth_lower_down_left() const;
  void set_mouth_lower_down_left(float value);
  private:
  float _internal_mouth_lower_down_left() const;
  void _internal_set_mouth_lower_down_left(float value);
  public:

  // float mouth_lower_down_right = 35;
  void clear_mouth_lower_down_right();
  float mouth_lower_down_right() const;
  void set_mouth_lower_down_right(float value);
  private:
  float _internal_mouth_lower_down_right() const;
  void _internal_set_mouth_lower_down_right(float value);
  public:

  // float mouth_press_left = 36;
  void clear_mouth_press_left();
  float mouth_press_left() const;
  void set_mouth_press_left(float value);
  private:
  float _internal_mouth_press_left() const;
  void _internal_set_mouth_press_left(float value);
  public:

  // float mouth_press_right = 37;
  void clear_mouth_press_right();
  float mouth_press_right() const;
  void set_mouth_press_right(float value);
  private:
  float _internal_mouth_press_right() const;
  void _internal_set_mouth_press_right(float value);
  public:

  // float mouth_pucker = 38;
  void clear_mouth_pucker();
  float mouth_pucker() const;
  void set_mouth_pucker(float value);
  private:
  float _internal_mouth_pucker() const;
  void _internal_set_mouth_pucker(float value);
  public:

  // float mouth_right = 39;
  void clear_mouth_right();
  float mouth_right() const;
  void set_mouth_right(float value);
  private:
  float _internal_mouth_right() const;
  void _internal_set_mouth_right(float value);
  public:

  // float mouth_roll_lower = 40;
  void clear_mouth_roll_lower();
  float mouth_roll_lower() const;
  void set_mouth_roll_lower(float value);
  private:
  float _internal_mouth_roll_lower() const;
  void _internal_set_mouth_roll_lower(float value);
  public:

  // float mouth_roll_upper = 41;
  void clear_mouth_roll_upper();
  float mouth_roll_upper() const;
  void set_mouth_roll_upper(float value);
  private:
  float _internal_mouth_roll_upper() const;
  void _internal_set_mouth_roll_upper(float value);
  public:

  // float mouth_shrug_lower = 42;
  void clear_mouth_shrug_lower();
  float mouth_shrug_lower() const;
  void set_mouth_shrug_lower(float value);
  private:
  float _internal_mouth_shrug_lower() const;
  void _internal_set_mouth_shrug_lower(float value);
  public:

  // float mouth_shrug_upper = 43;
  void clear_mouth_shrug_upper();
  float mouth_shrug_upper() const;
  void set_mouth_shrug_upper(float value);
  private:
  float _internal_mouth_shrug_upper() const;
  void _internal_set_mouth_shrug_upper(float value);
  public:

  // float mouth_smile_left = 44;
  void clear_mouth_smile_left();
  float mouth_smile_left() const;
  void set_mouth_smile_left(float value);
  private:
  float _internal_mouth_smile_left() const;
  void _internal_set_mouth_smile_left(float value);
  public:

  // float mouth_smile_right = 45;
  void clear_mouth_smile_right();
  float mouth_smile_right() const;
  void set_mouth_smile_right(float value);
  private:
  float _internal_mouth_smile_right() const;
  void _internal_set_mouth_smile_right(float value);
  public:

  // float mouth_stretch_left = 46;
  void clear_mouth_stretch_left();
  float mouth_stretch_left() const;
  void set_mouth_stretch_left(float value);
  private:
  float _internal_mouth_stretch_left() const;
  void _internal_set_mouth_stretch_left(float value);
  public:

  // float mouth_stretch_right = 47;
  void clear_mouth_stretch_right();
  float mouth_stretch_right() const;
  void set_mouth_stretch_right(float value);
  private:
  float _internal_mouth_stretch_right() const;
  void _internal_set_mouth_stretch_right(float value);
  public:

  // float mouth_upper_up_left = 48;
  void clear_mouth_upper_up_left();
  float mouth_upper_up_left() const;
  void set_mouth_upper_up_left(float value);
  private:
  float _internal_mouth_upper_up_left() const;
  void _internal_set_mouth_upper_up_left(float value);
  public:

  // float mouth_upper_up_right = 49;
  void clear_mouth_upper_up_right();
  float mouth_upper_up_right() const;
  void set_mouth_upper_up_right(float value);
  private:
  float _internal_mouth_upper_up_right() const;
  void _internal_set_mouth_upper_up_right(float value);
  public:

  // float nose_sneer_left = 50;
  void clear_nose_sneer_left();
  float nose_sneer_left() const;
  void set_nose_sneer_left(float value);
  private:
  float _internal_nose_sneer_left() const;
  void _internal_set_nose_sneer_left(float value);
  public:

  // float nose_sneer_right = 51;
  void clear_nose_sneer_right();
  float nose_sneer_right() const;
  void set_nose_sneer_right(float value);
  private:
  float _internal_nose_sneer_right() const;
  void _internal_set_nose_sneer_right(float value);
  public:

  // float tongue_out = 52;
  void clear_tongue_out();
  float tongue_out() const;
  void set_tongue_out(float value);
  private:
  float _internal_tongue_out() const;
  void _internal_set_tongue_out(float value);
  public:

  // @@protoc_insertion_point(class_scope:service.ARKitBlendShapes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float brow_down_left_;
    float brow_down_right_;
    float brow_inner_up_;
    float brow_outer_up_left_;
    float brow_outer_up_right_;
    float cheek_puff_;
    float cheek_squint_left_;
    float cheek_squint_right_;
    float eye_blink_left_;
    float eye_blink_right_;
    float eye_look_down_left_;
    float eye_look_down_right_;
    float eye_look_in_left_;
    float eye_look_in_right_;
    float eye_look_out_left_;
    float eye_look_out_right_;
    float eye_look_up_left_;
    float eye_look_up_right_;
    float eye_squint_left_;
    float eye_squint_right_;
    float eye_wide_left_;
    float eye_wide_right_;
    float jaw_forward_;
    float jaw_left_;
    float jaw_open_;
    float jaw_right_;
    float mouth_close_;
    float mouth_dimple_left_;
    float mouth_dimple_right_;
    float mouth_frown_left_;
    float mouth_frown_right_;
    float mouth_funnel_;
    float mouth_left_;
    float mouth_lower_down_left_;
    float mouth_lower_down_right_;
    float mouth_press_left_;
    float mouth_press_right_;
    float mouth_pucker_;
    float mouth_right_;
    float mouth_roll_lower_;
    float mouth_roll_upper_;
    float mouth_shrug_lower_;
    float mouth_shrug_upper_;
    float mouth_smile_left_;
    float mouth_smile_right_;
    float mouth_stretch_left_;
    float mouth_stretch_right_;
    float mouth_upper_up_left_;
    float mouth_upper_up_right_;
    float nose_sneer_left_;
    float nose_sneer_right_;
    float tongue_out_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_arkit_5fblend_5fshapes_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ARKitBlendShapesData

// .service.ARKitBlendShapes ar_kit_blend_shapes = 1;
inline bool ARKitBlendShapesData::_internal_has_ar_kit_blend_shapes() const {
  return this != internal_default_instance() && _impl_.ar_kit_blend_shapes_ != nullptr;
}
inline bool ARKitBlendShapesData::has_ar_kit_blend_shapes() const {
  return _internal_has_ar_kit_blend_shapes();
}
inline void ARKitBlendShapesData::clear_ar_kit_blend_shapes() {
  if (GetArenaForAllocation() == nullptr && _impl_.ar_kit_blend_shapes_ != nullptr) {
    delete _impl_.ar_kit_blend_shapes_;
  }
  _impl_.ar_kit_blend_shapes_ = nullptr;
}
inline const ::service::ARKitBlendShapes& ARKitBlendShapesData::_internal_ar_kit_blend_shapes() const {
  const ::service::ARKitBlendShapes* p = _impl_.ar_kit_blend_shapes_;
  return p != nullptr ? *p : reinterpret_cast<const ::service::ARKitBlendShapes&>(
      ::service::_ARKitBlendShapes_default_instance_);
}
inline const ::service::ARKitBlendShapes& ARKitBlendShapesData::ar_kit_blend_shapes() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapesData.ar_kit_blend_shapes)
  return _internal_ar_kit_blend_shapes();
}
inline void ARKitBlendShapesData::unsafe_arena_set_allocated_ar_kit_blend_shapes(
    ::service::ARKitBlendShapes* ar_kit_blend_shapes) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ar_kit_blend_shapes_);
  }
  _impl_.ar_kit_blend_shapes_ = ar_kit_blend_shapes;
  if (ar_kit_blend_shapes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service.ARKitBlendShapesData.ar_kit_blend_shapes)
}
inline ::service::ARKitBlendShapes* ARKitBlendShapesData::release_ar_kit_blend_shapes() {
  
  ::service::ARKitBlendShapes* temp = _impl_.ar_kit_blend_shapes_;
  _impl_.ar_kit_blend_shapes_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service::ARKitBlendShapes* ARKitBlendShapesData::unsafe_arena_release_ar_kit_blend_shapes() {
  // @@protoc_insertion_point(field_release:service.ARKitBlendShapesData.ar_kit_blend_shapes)
  
  ::service::ARKitBlendShapes* temp = _impl_.ar_kit_blend_shapes_;
  _impl_.ar_kit_blend_shapes_ = nullptr;
  return temp;
}
inline ::service::ARKitBlendShapes* ARKitBlendShapesData::_internal_mutable_ar_kit_blend_shapes() {
  
  if (_impl_.ar_kit_blend_shapes_ == nullptr) {
    auto* p = CreateMaybeMessage<::service::ARKitBlendShapes>(GetArenaForAllocation());
    _impl_.ar_kit_blend_shapes_ = p;
  }
  return _impl_.ar_kit_blend_shapes_;
}
inline ::service::ARKitBlendShapes* ARKitBlendShapesData::mutable_ar_kit_blend_shapes() {
  ::service::ARKitBlendShapes* _msg = _internal_mutable_ar_kit_blend_shapes();
  // @@protoc_insertion_point(field_mutable:service.ARKitBlendShapesData.ar_kit_blend_shapes)
  return _msg;
}
inline void ARKitBlendShapesData::set_allocated_ar_kit_blend_shapes(::service::ARKitBlendShapes* ar_kit_blend_shapes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.ar_kit_blend_shapes_;
  }
  if (ar_kit_blend_shapes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ar_kit_blend_shapes);
    if (message_arena != submessage_arena) {
      ar_kit_blend_shapes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ar_kit_blend_shapes, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.ar_kit_blend_shapes_ = ar_kit_blend_shapes;
  // @@protoc_insertion_point(field_set_allocated:service.ARKitBlendShapesData.ar_kit_blend_shapes)
}

// -------------------------------------------------------------------

// ARKitBlendShapes

// float brow_down_left = 1;
inline void ARKitBlendShapes::clear_brow_down_left() {
  _impl_.brow_down_left_ = 0;
}
inline float ARKitBlendShapes::_internal_brow_down_left() const {
  return _impl_.brow_down_left_;
}
inline float ARKitBlendShapes::brow_down_left() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.brow_down_left)
  return _internal_brow_down_left();
}
inline void ARKitBlendShapes::_internal_set_brow_down_left(float value) {
  
  _impl_.brow_down_left_ = value;
}
inline void ARKitBlendShapes::set_brow_down_left(float value) {
  _internal_set_brow_down_left(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.brow_down_left)
}

// float brow_down_right = 2;
inline void ARKitBlendShapes::clear_brow_down_right() {
  _impl_.brow_down_right_ = 0;
}
inline float ARKitBlendShapes::_internal_brow_down_right() const {
  return _impl_.brow_down_right_;
}
inline float ARKitBlendShapes::brow_down_right() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.brow_down_right)
  return _internal_brow_down_right();
}
inline void ARKitBlendShapes::_internal_set_brow_down_right(float value) {
  
  _impl_.brow_down_right_ = value;
}
inline void ARKitBlendShapes::set_brow_down_right(float value) {
  _internal_set_brow_down_right(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.brow_down_right)
}

// float brow_inner_up = 3;
inline void ARKitBlendShapes::clear_brow_inner_up() {
  _impl_.brow_inner_up_ = 0;
}
inline float ARKitBlendShapes::_internal_brow_inner_up() const {
  return _impl_.brow_inner_up_;
}
inline float ARKitBlendShapes::brow_inner_up() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.brow_inner_up)
  return _internal_brow_inner_up();
}
inline void ARKitBlendShapes::_internal_set_brow_inner_up(float value) {
  
  _impl_.brow_inner_up_ = value;
}
inline void ARKitBlendShapes::set_brow_inner_up(float value) {
  _internal_set_brow_inner_up(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.brow_inner_up)
}

// float brow_outer_up_left = 4;
inline void ARKitBlendShapes::clear_brow_outer_up_left() {
  _impl_.brow_outer_up_left_ = 0;
}
inline float ARKitBlendShapes::_internal_brow_outer_up_left() const {
  return _impl_.brow_outer_up_left_;
}
inline float ARKitBlendShapes::brow_outer_up_left() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.brow_outer_up_left)
  return _internal_brow_outer_up_left();
}
inline void ARKitBlendShapes::_internal_set_brow_outer_up_left(float value) {
  
  _impl_.brow_outer_up_left_ = value;
}
inline void ARKitBlendShapes::set_brow_outer_up_left(float value) {
  _internal_set_brow_outer_up_left(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.brow_outer_up_left)
}

// float brow_outer_up_right = 5;
inline void ARKitBlendShapes::clear_brow_outer_up_right() {
  _impl_.brow_outer_up_right_ = 0;
}
inline float ARKitBlendShapes::_internal_brow_outer_up_right() const {
  return _impl_.brow_outer_up_right_;
}
inline float ARKitBlendShapes::brow_outer_up_right() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.brow_outer_up_right)
  return _internal_brow_outer_up_right();
}
inline void ARKitBlendShapes::_internal_set_brow_outer_up_right(float value) {
  
  _impl_.brow_outer_up_right_ = value;
}
inline void ARKitBlendShapes::set_brow_outer_up_right(float value) {
  _internal_set_brow_outer_up_right(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.brow_outer_up_right)
}

// float cheek_puff = 6;
inline void ARKitBlendShapes::clear_cheek_puff() {
  _impl_.cheek_puff_ = 0;
}
inline float ARKitBlendShapes::_internal_cheek_puff() const {
  return _impl_.cheek_puff_;
}
inline float ARKitBlendShapes::cheek_puff() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.cheek_puff)
  return _internal_cheek_puff();
}
inline void ARKitBlendShapes::_internal_set_cheek_puff(float value) {
  
  _impl_.cheek_puff_ = value;
}
inline void ARKitBlendShapes::set_cheek_puff(float value) {
  _internal_set_cheek_puff(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.cheek_puff)
}

// float cheek_squint_left = 7;
inline void ARKitBlendShapes::clear_cheek_squint_left() {
  _impl_.cheek_squint_left_ = 0;
}
inline float ARKitBlendShapes::_internal_cheek_squint_left() const {
  return _impl_.cheek_squint_left_;
}
inline float ARKitBlendShapes::cheek_squint_left() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.cheek_squint_left)
  return _internal_cheek_squint_left();
}
inline void ARKitBlendShapes::_internal_set_cheek_squint_left(float value) {
  
  _impl_.cheek_squint_left_ = value;
}
inline void ARKitBlendShapes::set_cheek_squint_left(float value) {
  _internal_set_cheek_squint_left(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.cheek_squint_left)
}

// float cheek_squint_right = 8;
inline void ARKitBlendShapes::clear_cheek_squint_right() {
  _impl_.cheek_squint_right_ = 0;
}
inline float ARKitBlendShapes::_internal_cheek_squint_right() const {
  return _impl_.cheek_squint_right_;
}
inline float ARKitBlendShapes::cheek_squint_right() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.cheek_squint_right)
  return _internal_cheek_squint_right();
}
inline void ARKitBlendShapes::_internal_set_cheek_squint_right(float value) {
  
  _impl_.cheek_squint_right_ = value;
}
inline void ARKitBlendShapes::set_cheek_squint_right(float value) {
  _internal_set_cheek_squint_right(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.cheek_squint_right)
}

// float eye_blink_left = 9;
inline void ARKitBlendShapes::clear_eye_blink_left() {
  _impl_.eye_blink_left_ = 0;
}
inline float ARKitBlendShapes::_internal_eye_blink_left() const {
  return _impl_.eye_blink_left_;
}
inline float ARKitBlendShapes::eye_blink_left() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.eye_blink_left)
  return _internal_eye_blink_left();
}
inline void ARKitBlendShapes::_internal_set_eye_blink_left(float value) {
  
  _impl_.eye_blink_left_ = value;
}
inline void ARKitBlendShapes::set_eye_blink_left(float value) {
  _internal_set_eye_blink_left(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.eye_blink_left)
}

// float eye_blink_right = 10;
inline void ARKitBlendShapes::clear_eye_blink_right() {
  _impl_.eye_blink_right_ = 0;
}
inline float ARKitBlendShapes::_internal_eye_blink_right() const {
  return _impl_.eye_blink_right_;
}
inline float ARKitBlendShapes::eye_blink_right() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.eye_blink_right)
  return _internal_eye_blink_right();
}
inline void ARKitBlendShapes::_internal_set_eye_blink_right(float value) {
  
  _impl_.eye_blink_right_ = value;
}
inline void ARKitBlendShapes::set_eye_blink_right(float value) {
  _internal_set_eye_blink_right(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.eye_blink_right)
}

// float eye_look_down_left = 11;
inline void ARKitBlendShapes::clear_eye_look_down_left() {
  _impl_.eye_look_down_left_ = 0;
}
inline float ARKitBlendShapes::_internal_eye_look_down_left() const {
  return _impl_.eye_look_down_left_;
}
inline float ARKitBlendShapes::eye_look_down_left() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.eye_look_down_left)
  return _internal_eye_look_down_left();
}
inline void ARKitBlendShapes::_internal_set_eye_look_down_left(float value) {
  
  _impl_.eye_look_down_left_ = value;
}
inline void ARKitBlendShapes::set_eye_look_down_left(float value) {
  _internal_set_eye_look_down_left(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.eye_look_down_left)
}

// float eye_look_down_right = 12;
inline void ARKitBlendShapes::clear_eye_look_down_right() {
  _impl_.eye_look_down_right_ = 0;
}
inline float ARKitBlendShapes::_internal_eye_look_down_right() const {
  return _impl_.eye_look_down_right_;
}
inline float ARKitBlendShapes::eye_look_down_right() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.eye_look_down_right)
  return _internal_eye_look_down_right();
}
inline void ARKitBlendShapes::_internal_set_eye_look_down_right(float value) {
  
  _impl_.eye_look_down_right_ = value;
}
inline void ARKitBlendShapes::set_eye_look_down_right(float value) {
  _internal_set_eye_look_down_right(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.eye_look_down_right)
}

// float eye_look_in_left = 13;
inline void ARKitBlendShapes::clear_eye_look_in_left() {
  _impl_.eye_look_in_left_ = 0;
}
inline float ARKitBlendShapes::_internal_eye_look_in_left() const {
  return _impl_.eye_look_in_left_;
}
inline float ARKitBlendShapes::eye_look_in_left() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.eye_look_in_left)
  return _internal_eye_look_in_left();
}
inline void ARKitBlendShapes::_internal_set_eye_look_in_left(float value) {
  
  _impl_.eye_look_in_left_ = value;
}
inline void ARKitBlendShapes::set_eye_look_in_left(float value) {
  _internal_set_eye_look_in_left(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.eye_look_in_left)
}

// float eye_look_in_right = 14;
inline void ARKitBlendShapes::clear_eye_look_in_right() {
  _impl_.eye_look_in_right_ = 0;
}
inline float ARKitBlendShapes::_internal_eye_look_in_right() const {
  return _impl_.eye_look_in_right_;
}
inline float ARKitBlendShapes::eye_look_in_right() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.eye_look_in_right)
  return _internal_eye_look_in_right();
}
inline void ARKitBlendShapes::_internal_set_eye_look_in_right(float value) {
  
  _impl_.eye_look_in_right_ = value;
}
inline void ARKitBlendShapes::set_eye_look_in_right(float value) {
  _internal_set_eye_look_in_right(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.eye_look_in_right)
}

// float eye_look_out_left = 15;
inline void ARKitBlendShapes::clear_eye_look_out_left() {
  _impl_.eye_look_out_left_ = 0;
}
inline float ARKitBlendShapes::_internal_eye_look_out_left() const {
  return _impl_.eye_look_out_left_;
}
inline float ARKitBlendShapes::eye_look_out_left() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.eye_look_out_left)
  return _internal_eye_look_out_left();
}
inline void ARKitBlendShapes::_internal_set_eye_look_out_left(float value) {
  
  _impl_.eye_look_out_left_ = value;
}
inline void ARKitBlendShapes::set_eye_look_out_left(float value) {
  _internal_set_eye_look_out_left(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.eye_look_out_left)
}

// float eye_look_out_right = 16;
inline void ARKitBlendShapes::clear_eye_look_out_right() {
  _impl_.eye_look_out_right_ = 0;
}
inline float ARKitBlendShapes::_internal_eye_look_out_right() const {
  return _impl_.eye_look_out_right_;
}
inline float ARKitBlendShapes::eye_look_out_right() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.eye_look_out_right)
  return _internal_eye_look_out_right();
}
inline void ARKitBlendShapes::_internal_set_eye_look_out_right(float value) {
  
  _impl_.eye_look_out_right_ = value;
}
inline void ARKitBlendShapes::set_eye_look_out_right(float value) {
  _internal_set_eye_look_out_right(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.eye_look_out_right)
}

// float eye_look_up_left = 17;
inline void ARKitBlendShapes::clear_eye_look_up_left() {
  _impl_.eye_look_up_left_ = 0;
}
inline float ARKitBlendShapes::_internal_eye_look_up_left() const {
  return _impl_.eye_look_up_left_;
}
inline float ARKitBlendShapes::eye_look_up_left() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.eye_look_up_left)
  return _internal_eye_look_up_left();
}
inline void ARKitBlendShapes::_internal_set_eye_look_up_left(float value) {
  
  _impl_.eye_look_up_left_ = value;
}
inline void ARKitBlendShapes::set_eye_look_up_left(float value) {
  _internal_set_eye_look_up_left(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.eye_look_up_left)
}

// float eye_look_up_right = 18;
inline void ARKitBlendShapes::clear_eye_look_up_right() {
  _impl_.eye_look_up_right_ = 0;
}
inline float ARKitBlendShapes::_internal_eye_look_up_right() const {
  return _impl_.eye_look_up_right_;
}
inline float ARKitBlendShapes::eye_look_up_right() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.eye_look_up_right)
  return _internal_eye_look_up_right();
}
inline void ARKitBlendShapes::_internal_set_eye_look_up_right(float value) {
  
  _impl_.eye_look_up_right_ = value;
}
inline void ARKitBlendShapes::set_eye_look_up_right(float value) {
  _internal_set_eye_look_up_right(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.eye_look_up_right)
}

// float eye_squint_left = 19;
inline void ARKitBlendShapes::clear_eye_squint_left() {
  _impl_.eye_squint_left_ = 0;
}
inline float ARKitBlendShapes::_internal_eye_squint_left() const {
  return _impl_.eye_squint_left_;
}
inline float ARKitBlendShapes::eye_squint_left() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.eye_squint_left)
  return _internal_eye_squint_left();
}
inline void ARKitBlendShapes::_internal_set_eye_squint_left(float value) {
  
  _impl_.eye_squint_left_ = value;
}
inline void ARKitBlendShapes::set_eye_squint_left(float value) {
  _internal_set_eye_squint_left(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.eye_squint_left)
}

// float eye_squint_right = 20;
inline void ARKitBlendShapes::clear_eye_squint_right() {
  _impl_.eye_squint_right_ = 0;
}
inline float ARKitBlendShapes::_internal_eye_squint_right() const {
  return _impl_.eye_squint_right_;
}
inline float ARKitBlendShapes::eye_squint_right() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.eye_squint_right)
  return _internal_eye_squint_right();
}
inline void ARKitBlendShapes::_internal_set_eye_squint_right(float value) {
  
  _impl_.eye_squint_right_ = value;
}
inline void ARKitBlendShapes::set_eye_squint_right(float value) {
  _internal_set_eye_squint_right(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.eye_squint_right)
}

// float eye_wide_left = 21;
inline void ARKitBlendShapes::clear_eye_wide_left() {
  _impl_.eye_wide_left_ = 0;
}
inline float ARKitBlendShapes::_internal_eye_wide_left() const {
  return _impl_.eye_wide_left_;
}
inline float ARKitBlendShapes::eye_wide_left() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.eye_wide_left)
  return _internal_eye_wide_left();
}
inline void ARKitBlendShapes::_internal_set_eye_wide_left(float value) {
  
  _impl_.eye_wide_left_ = value;
}
inline void ARKitBlendShapes::set_eye_wide_left(float value) {
  _internal_set_eye_wide_left(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.eye_wide_left)
}

// float eye_wide_right = 22;
inline void ARKitBlendShapes::clear_eye_wide_right() {
  _impl_.eye_wide_right_ = 0;
}
inline float ARKitBlendShapes::_internal_eye_wide_right() const {
  return _impl_.eye_wide_right_;
}
inline float ARKitBlendShapes::eye_wide_right() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.eye_wide_right)
  return _internal_eye_wide_right();
}
inline void ARKitBlendShapes::_internal_set_eye_wide_right(float value) {
  
  _impl_.eye_wide_right_ = value;
}
inline void ARKitBlendShapes::set_eye_wide_right(float value) {
  _internal_set_eye_wide_right(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.eye_wide_right)
}

// float jaw_forward = 23;
inline void ARKitBlendShapes::clear_jaw_forward() {
  _impl_.jaw_forward_ = 0;
}
inline float ARKitBlendShapes::_internal_jaw_forward() const {
  return _impl_.jaw_forward_;
}
inline float ARKitBlendShapes::jaw_forward() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.jaw_forward)
  return _internal_jaw_forward();
}
inline void ARKitBlendShapes::_internal_set_jaw_forward(float value) {
  
  _impl_.jaw_forward_ = value;
}
inline void ARKitBlendShapes::set_jaw_forward(float value) {
  _internal_set_jaw_forward(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.jaw_forward)
}

// float jaw_left = 24;
inline void ARKitBlendShapes::clear_jaw_left() {
  _impl_.jaw_left_ = 0;
}
inline float ARKitBlendShapes::_internal_jaw_left() const {
  return _impl_.jaw_left_;
}
inline float ARKitBlendShapes::jaw_left() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.jaw_left)
  return _internal_jaw_left();
}
inline void ARKitBlendShapes::_internal_set_jaw_left(float value) {
  
  _impl_.jaw_left_ = value;
}
inline void ARKitBlendShapes::set_jaw_left(float value) {
  _internal_set_jaw_left(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.jaw_left)
}

// float jaw_open = 25;
inline void ARKitBlendShapes::clear_jaw_open() {
  _impl_.jaw_open_ = 0;
}
inline float ARKitBlendShapes::_internal_jaw_open() const {
  return _impl_.jaw_open_;
}
inline float ARKitBlendShapes::jaw_open() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.jaw_open)
  return _internal_jaw_open();
}
inline void ARKitBlendShapes::_internal_set_jaw_open(float value) {
  
  _impl_.jaw_open_ = value;
}
inline void ARKitBlendShapes::set_jaw_open(float value) {
  _internal_set_jaw_open(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.jaw_open)
}

// float jaw_right = 26;
inline void ARKitBlendShapes::clear_jaw_right() {
  _impl_.jaw_right_ = 0;
}
inline float ARKitBlendShapes::_internal_jaw_right() const {
  return _impl_.jaw_right_;
}
inline float ARKitBlendShapes::jaw_right() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.jaw_right)
  return _internal_jaw_right();
}
inline void ARKitBlendShapes::_internal_set_jaw_right(float value) {
  
  _impl_.jaw_right_ = value;
}
inline void ARKitBlendShapes::set_jaw_right(float value) {
  _internal_set_jaw_right(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.jaw_right)
}

// float mouth_close = 27;
inline void ARKitBlendShapes::clear_mouth_close() {
  _impl_.mouth_close_ = 0;
}
inline float ARKitBlendShapes::_internal_mouth_close() const {
  return _impl_.mouth_close_;
}
inline float ARKitBlendShapes::mouth_close() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.mouth_close)
  return _internal_mouth_close();
}
inline void ARKitBlendShapes::_internal_set_mouth_close(float value) {
  
  _impl_.mouth_close_ = value;
}
inline void ARKitBlendShapes::set_mouth_close(float value) {
  _internal_set_mouth_close(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.mouth_close)
}

// float mouth_dimple_left = 28;
inline void ARKitBlendShapes::clear_mouth_dimple_left() {
  _impl_.mouth_dimple_left_ = 0;
}
inline float ARKitBlendShapes::_internal_mouth_dimple_left() const {
  return _impl_.mouth_dimple_left_;
}
inline float ARKitBlendShapes::mouth_dimple_left() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.mouth_dimple_left)
  return _internal_mouth_dimple_left();
}
inline void ARKitBlendShapes::_internal_set_mouth_dimple_left(float value) {
  
  _impl_.mouth_dimple_left_ = value;
}
inline void ARKitBlendShapes::set_mouth_dimple_left(float value) {
  _internal_set_mouth_dimple_left(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.mouth_dimple_left)
}

// float mouth_dimple_right = 29;
inline void ARKitBlendShapes::clear_mouth_dimple_right() {
  _impl_.mouth_dimple_right_ = 0;
}
inline float ARKitBlendShapes::_internal_mouth_dimple_right() const {
  return _impl_.mouth_dimple_right_;
}
inline float ARKitBlendShapes::mouth_dimple_right() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.mouth_dimple_right)
  return _internal_mouth_dimple_right();
}
inline void ARKitBlendShapes::_internal_set_mouth_dimple_right(float value) {
  
  _impl_.mouth_dimple_right_ = value;
}
inline void ARKitBlendShapes::set_mouth_dimple_right(float value) {
  _internal_set_mouth_dimple_right(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.mouth_dimple_right)
}

// float mouth_frown_left = 30;
inline void ARKitBlendShapes::clear_mouth_frown_left() {
  _impl_.mouth_frown_left_ = 0;
}
inline float ARKitBlendShapes::_internal_mouth_frown_left() const {
  return _impl_.mouth_frown_left_;
}
inline float ARKitBlendShapes::mouth_frown_left() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.mouth_frown_left)
  return _internal_mouth_frown_left();
}
inline void ARKitBlendShapes::_internal_set_mouth_frown_left(float value) {
  
  _impl_.mouth_frown_left_ = value;
}
inline void ARKitBlendShapes::set_mouth_frown_left(float value) {
  _internal_set_mouth_frown_left(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.mouth_frown_left)
}

// float mouth_frown_right = 31;
inline void ARKitBlendShapes::clear_mouth_frown_right() {
  _impl_.mouth_frown_right_ = 0;
}
inline float ARKitBlendShapes::_internal_mouth_frown_right() const {
  return _impl_.mouth_frown_right_;
}
inline float ARKitBlendShapes::mouth_frown_right() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.mouth_frown_right)
  return _internal_mouth_frown_right();
}
inline void ARKitBlendShapes::_internal_set_mouth_frown_right(float value) {
  
  _impl_.mouth_frown_right_ = value;
}
inline void ARKitBlendShapes::set_mouth_frown_right(float value) {
  _internal_set_mouth_frown_right(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.mouth_frown_right)
}

// float mouth_funnel = 32;
inline void ARKitBlendShapes::clear_mouth_funnel() {
  _impl_.mouth_funnel_ = 0;
}
inline float ARKitBlendShapes::_internal_mouth_funnel() const {
  return _impl_.mouth_funnel_;
}
inline float ARKitBlendShapes::mouth_funnel() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.mouth_funnel)
  return _internal_mouth_funnel();
}
inline void ARKitBlendShapes::_internal_set_mouth_funnel(float value) {
  
  _impl_.mouth_funnel_ = value;
}
inline void ARKitBlendShapes::set_mouth_funnel(float value) {
  _internal_set_mouth_funnel(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.mouth_funnel)
}

// float mouth_left = 33;
inline void ARKitBlendShapes::clear_mouth_left() {
  _impl_.mouth_left_ = 0;
}
inline float ARKitBlendShapes::_internal_mouth_left() const {
  return _impl_.mouth_left_;
}
inline float ARKitBlendShapes::mouth_left() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.mouth_left)
  return _internal_mouth_left();
}
inline void ARKitBlendShapes::_internal_set_mouth_left(float value) {
  
  _impl_.mouth_left_ = value;
}
inline void ARKitBlendShapes::set_mouth_left(float value) {
  _internal_set_mouth_left(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.mouth_left)
}

// float mouth_lower_down_left = 34;
inline void ARKitBlendShapes::clear_mouth_lower_down_left() {
  _impl_.mouth_lower_down_left_ = 0;
}
inline float ARKitBlendShapes::_internal_mouth_lower_down_left() const {
  return _impl_.mouth_lower_down_left_;
}
inline float ARKitBlendShapes::mouth_lower_down_left() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.mouth_lower_down_left)
  return _internal_mouth_lower_down_left();
}
inline void ARKitBlendShapes::_internal_set_mouth_lower_down_left(float value) {
  
  _impl_.mouth_lower_down_left_ = value;
}
inline void ARKitBlendShapes::set_mouth_lower_down_left(float value) {
  _internal_set_mouth_lower_down_left(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.mouth_lower_down_left)
}

// float mouth_lower_down_right = 35;
inline void ARKitBlendShapes::clear_mouth_lower_down_right() {
  _impl_.mouth_lower_down_right_ = 0;
}
inline float ARKitBlendShapes::_internal_mouth_lower_down_right() const {
  return _impl_.mouth_lower_down_right_;
}
inline float ARKitBlendShapes::mouth_lower_down_right() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.mouth_lower_down_right)
  return _internal_mouth_lower_down_right();
}
inline void ARKitBlendShapes::_internal_set_mouth_lower_down_right(float value) {
  
  _impl_.mouth_lower_down_right_ = value;
}
inline void ARKitBlendShapes::set_mouth_lower_down_right(float value) {
  _internal_set_mouth_lower_down_right(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.mouth_lower_down_right)
}

// float mouth_press_left = 36;
inline void ARKitBlendShapes::clear_mouth_press_left() {
  _impl_.mouth_press_left_ = 0;
}
inline float ARKitBlendShapes::_internal_mouth_press_left() const {
  return _impl_.mouth_press_left_;
}
inline float ARKitBlendShapes::mouth_press_left() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.mouth_press_left)
  return _internal_mouth_press_left();
}
inline void ARKitBlendShapes::_internal_set_mouth_press_left(float value) {
  
  _impl_.mouth_press_left_ = value;
}
inline void ARKitBlendShapes::set_mouth_press_left(float value) {
  _internal_set_mouth_press_left(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.mouth_press_left)
}

// float mouth_press_right = 37;
inline void ARKitBlendShapes::clear_mouth_press_right() {
  _impl_.mouth_press_right_ = 0;
}
inline float ARKitBlendShapes::_internal_mouth_press_right() const {
  return _impl_.mouth_press_right_;
}
inline float ARKitBlendShapes::mouth_press_right() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.mouth_press_right)
  return _internal_mouth_press_right();
}
inline void ARKitBlendShapes::_internal_set_mouth_press_right(float value) {
  
  _impl_.mouth_press_right_ = value;
}
inline void ARKitBlendShapes::set_mouth_press_right(float value) {
  _internal_set_mouth_press_right(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.mouth_press_right)
}

// float mouth_pucker = 38;
inline void ARKitBlendShapes::clear_mouth_pucker() {
  _impl_.mouth_pucker_ = 0;
}
inline float ARKitBlendShapes::_internal_mouth_pucker() const {
  return _impl_.mouth_pucker_;
}
inline float ARKitBlendShapes::mouth_pucker() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.mouth_pucker)
  return _internal_mouth_pucker();
}
inline void ARKitBlendShapes::_internal_set_mouth_pucker(float value) {
  
  _impl_.mouth_pucker_ = value;
}
inline void ARKitBlendShapes::set_mouth_pucker(float value) {
  _internal_set_mouth_pucker(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.mouth_pucker)
}

// float mouth_right = 39;
inline void ARKitBlendShapes::clear_mouth_right() {
  _impl_.mouth_right_ = 0;
}
inline float ARKitBlendShapes::_internal_mouth_right() const {
  return _impl_.mouth_right_;
}
inline float ARKitBlendShapes::mouth_right() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.mouth_right)
  return _internal_mouth_right();
}
inline void ARKitBlendShapes::_internal_set_mouth_right(float value) {
  
  _impl_.mouth_right_ = value;
}
inline void ARKitBlendShapes::set_mouth_right(float value) {
  _internal_set_mouth_right(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.mouth_right)
}

// float mouth_roll_lower = 40;
inline void ARKitBlendShapes::clear_mouth_roll_lower() {
  _impl_.mouth_roll_lower_ = 0;
}
inline float ARKitBlendShapes::_internal_mouth_roll_lower() const {
  return _impl_.mouth_roll_lower_;
}
inline float ARKitBlendShapes::mouth_roll_lower() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.mouth_roll_lower)
  return _internal_mouth_roll_lower();
}
inline void ARKitBlendShapes::_internal_set_mouth_roll_lower(float value) {
  
  _impl_.mouth_roll_lower_ = value;
}
inline void ARKitBlendShapes::set_mouth_roll_lower(float value) {
  _internal_set_mouth_roll_lower(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.mouth_roll_lower)
}

// float mouth_roll_upper = 41;
inline void ARKitBlendShapes::clear_mouth_roll_upper() {
  _impl_.mouth_roll_upper_ = 0;
}
inline float ARKitBlendShapes::_internal_mouth_roll_upper() const {
  return _impl_.mouth_roll_upper_;
}
inline float ARKitBlendShapes::mouth_roll_upper() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.mouth_roll_upper)
  return _internal_mouth_roll_upper();
}
inline void ARKitBlendShapes::_internal_set_mouth_roll_upper(float value) {
  
  _impl_.mouth_roll_upper_ = value;
}
inline void ARKitBlendShapes::set_mouth_roll_upper(float value) {
  _internal_set_mouth_roll_upper(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.mouth_roll_upper)
}

// float mouth_shrug_lower = 42;
inline void ARKitBlendShapes::clear_mouth_shrug_lower() {
  _impl_.mouth_shrug_lower_ = 0;
}
inline float ARKitBlendShapes::_internal_mouth_shrug_lower() const {
  return _impl_.mouth_shrug_lower_;
}
inline float ARKitBlendShapes::mouth_shrug_lower() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.mouth_shrug_lower)
  return _internal_mouth_shrug_lower();
}
inline void ARKitBlendShapes::_internal_set_mouth_shrug_lower(float value) {
  
  _impl_.mouth_shrug_lower_ = value;
}
inline void ARKitBlendShapes::set_mouth_shrug_lower(float value) {
  _internal_set_mouth_shrug_lower(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.mouth_shrug_lower)
}

// float mouth_shrug_upper = 43;
inline void ARKitBlendShapes::clear_mouth_shrug_upper() {
  _impl_.mouth_shrug_upper_ = 0;
}
inline float ARKitBlendShapes::_internal_mouth_shrug_upper() const {
  return _impl_.mouth_shrug_upper_;
}
inline float ARKitBlendShapes::mouth_shrug_upper() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.mouth_shrug_upper)
  return _internal_mouth_shrug_upper();
}
inline void ARKitBlendShapes::_internal_set_mouth_shrug_upper(float value) {
  
  _impl_.mouth_shrug_upper_ = value;
}
inline void ARKitBlendShapes::set_mouth_shrug_upper(float value) {
  _internal_set_mouth_shrug_upper(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.mouth_shrug_upper)
}

// float mouth_smile_left = 44;
inline void ARKitBlendShapes::clear_mouth_smile_left() {
  _impl_.mouth_smile_left_ = 0;
}
inline float ARKitBlendShapes::_internal_mouth_smile_left() const {
  return _impl_.mouth_smile_left_;
}
inline float ARKitBlendShapes::mouth_smile_left() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.mouth_smile_left)
  return _internal_mouth_smile_left();
}
inline void ARKitBlendShapes::_internal_set_mouth_smile_left(float value) {
  
  _impl_.mouth_smile_left_ = value;
}
inline void ARKitBlendShapes::set_mouth_smile_left(float value) {
  _internal_set_mouth_smile_left(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.mouth_smile_left)
}

// float mouth_smile_right = 45;
inline void ARKitBlendShapes::clear_mouth_smile_right() {
  _impl_.mouth_smile_right_ = 0;
}
inline float ARKitBlendShapes::_internal_mouth_smile_right() const {
  return _impl_.mouth_smile_right_;
}
inline float ARKitBlendShapes::mouth_smile_right() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.mouth_smile_right)
  return _internal_mouth_smile_right();
}
inline void ARKitBlendShapes::_internal_set_mouth_smile_right(float value) {
  
  _impl_.mouth_smile_right_ = value;
}
inline void ARKitBlendShapes::set_mouth_smile_right(float value) {
  _internal_set_mouth_smile_right(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.mouth_smile_right)
}

// float mouth_stretch_left = 46;
inline void ARKitBlendShapes::clear_mouth_stretch_left() {
  _impl_.mouth_stretch_left_ = 0;
}
inline float ARKitBlendShapes::_internal_mouth_stretch_left() const {
  return _impl_.mouth_stretch_left_;
}
inline float ARKitBlendShapes::mouth_stretch_left() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.mouth_stretch_left)
  return _internal_mouth_stretch_left();
}
inline void ARKitBlendShapes::_internal_set_mouth_stretch_left(float value) {
  
  _impl_.mouth_stretch_left_ = value;
}
inline void ARKitBlendShapes::set_mouth_stretch_left(float value) {
  _internal_set_mouth_stretch_left(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.mouth_stretch_left)
}

// float mouth_stretch_right = 47;
inline void ARKitBlendShapes::clear_mouth_stretch_right() {
  _impl_.mouth_stretch_right_ = 0;
}
inline float ARKitBlendShapes::_internal_mouth_stretch_right() const {
  return _impl_.mouth_stretch_right_;
}
inline float ARKitBlendShapes::mouth_stretch_right() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.mouth_stretch_right)
  return _internal_mouth_stretch_right();
}
inline void ARKitBlendShapes::_internal_set_mouth_stretch_right(float value) {
  
  _impl_.mouth_stretch_right_ = value;
}
inline void ARKitBlendShapes::set_mouth_stretch_right(float value) {
  _internal_set_mouth_stretch_right(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.mouth_stretch_right)
}

// float mouth_upper_up_left = 48;
inline void ARKitBlendShapes::clear_mouth_upper_up_left() {
  _impl_.mouth_upper_up_left_ = 0;
}
inline float ARKitBlendShapes::_internal_mouth_upper_up_left() const {
  return _impl_.mouth_upper_up_left_;
}
inline float ARKitBlendShapes::mouth_upper_up_left() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.mouth_upper_up_left)
  return _internal_mouth_upper_up_left();
}
inline void ARKitBlendShapes::_internal_set_mouth_upper_up_left(float value) {
  
  _impl_.mouth_upper_up_left_ = value;
}
inline void ARKitBlendShapes::set_mouth_upper_up_left(float value) {
  _internal_set_mouth_upper_up_left(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.mouth_upper_up_left)
}

// float mouth_upper_up_right = 49;
inline void ARKitBlendShapes::clear_mouth_upper_up_right() {
  _impl_.mouth_upper_up_right_ = 0;
}
inline float ARKitBlendShapes::_internal_mouth_upper_up_right() const {
  return _impl_.mouth_upper_up_right_;
}
inline float ARKitBlendShapes::mouth_upper_up_right() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.mouth_upper_up_right)
  return _internal_mouth_upper_up_right();
}
inline void ARKitBlendShapes::_internal_set_mouth_upper_up_right(float value) {
  
  _impl_.mouth_upper_up_right_ = value;
}
inline void ARKitBlendShapes::set_mouth_upper_up_right(float value) {
  _internal_set_mouth_upper_up_right(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.mouth_upper_up_right)
}

// float nose_sneer_left = 50;
inline void ARKitBlendShapes::clear_nose_sneer_left() {
  _impl_.nose_sneer_left_ = 0;
}
inline float ARKitBlendShapes::_internal_nose_sneer_left() const {
  return _impl_.nose_sneer_left_;
}
inline float ARKitBlendShapes::nose_sneer_left() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.nose_sneer_left)
  return _internal_nose_sneer_left();
}
inline void ARKitBlendShapes::_internal_set_nose_sneer_left(float value) {
  
  _impl_.nose_sneer_left_ = value;
}
inline void ARKitBlendShapes::set_nose_sneer_left(float value) {
  _internal_set_nose_sneer_left(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.nose_sneer_left)
}

// float nose_sneer_right = 51;
inline void ARKitBlendShapes::clear_nose_sneer_right() {
  _impl_.nose_sneer_right_ = 0;
}
inline float ARKitBlendShapes::_internal_nose_sneer_right() const {
  return _impl_.nose_sneer_right_;
}
inline float ARKitBlendShapes::nose_sneer_right() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.nose_sneer_right)
  return _internal_nose_sneer_right();
}
inline void ARKitBlendShapes::_internal_set_nose_sneer_right(float value) {
  
  _impl_.nose_sneer_right_ = value;
}
inline void ARKitBlendShapes::set_nose_sneer_right(float value) {
  _internal_set_nose_sneer_right(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.nose_sneer_right)
}

// float tongue_out = 52;
inline void ARKitBlendShapes::clear_tongue_out() {
  _impl_.tongue_out_ = 0;
}
inline float ARKitBlendShapes::_internal_tongue_out() const {
  return _impl_.tongue_out_;
}
inline float ARKitBlendShapes::tongue_out() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.tongue_out)
  return _internal_tongue_out();
}
inline void ARKitBlendShapes::_internal_set_tongue_out(float value) {
  
  _impl_.tongue_out_ = value;
}
inline void ARKitBlendShapes::set_tongue_out(float value) {
  _internal_set_tongue_out(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.tongue_out)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace service

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_arkit_5fblend_5fshapes_2eproto

#endif
